/**
 * @file ua_types_generated.h
 *
 * @brief Autogenerated data types defined in the UA standard
 *
 * Generated from ../schema/Opc.Ua.Types.bsd with script ../tools/generate_builtin.py
 * on host jpfr-VirtualBox by user jpfr at 2014-06-06 02:08:25
 */

#ifndef UA_TYPES_GENERATED_H_
#define UA_TYPES_GENERATED_H_

#include "ua_types.h"
#include "ua_types_encoding_binary.h"
#include "ua_types_encoding_xml.h"
#include "ua_namespace_0.h"

/** @brief The possible encodings for a NodeId value. */
typedef UA_UInt32 UA_NodeIdType;
enum UA_NodeIdType_enum { 
	UA_NODEIDTYPE_TWOBYTE = 0,
	UA_NODEIDTYPE_FOURBYTE = 1,
	UA_NODEIDTYPE_NUMERIC = 2,
	UA_NODEIDTYPE_STRING = 3,
	UA_NODEIDTYPE_GUID = 4,
	UA_NODEIDTYPE_BYTESTRING = 5
};
UA_TYPE_PROTOTYPES (UA_NodeIdType)
UA_TYPE_BINARY_ENCODING(UA_NodeIdType)
UA_TYPE_XML_ENCODING(UA_NodeIdType)

/** @brief An image encoded in BMP format. */
typedef UA_ByteString UA_ImageBMP;
UA_TYPE_PROTOTYPES(UA_ImageBMP)
UA_TYPE_BINARY_ENCODING(UA_ImageBMP)
UA_TYPE_XML_ENCODING(UA_ImageBMP)

/** @brief An image encoded in GIF format. */
typedef UA_ByteString UA_ImageGIF;
UA_TYPE_PROTOTYPES(UA_ImageGIF)
UA_TYPE_BINARY_ENCODING(UA_ImageGIF)
UA_TYPE_XML_ENCODING(UA_ImageGIF)

/** @brief An image encoded in JPEG format. */
typedef UA_ByteString UA_ImageJPG;
UA_TYPE_PROTOTYPES(UA_ImageJPG)
UA_TYPE_BINARY_ENCODING(UA_ImageJPG)
UA_TYPE_XML_ENCODING(UA_ImageJPG)

/** @brief An image encoded in PNG format. */
typedef UA_ByteString UA_ImagePNG;
UA_TYPE_PROTOTYPES(UA_ImagePNG)
UA_TYPE_BINARY_ENCODING(UA_ImagePNG)
UA_TYPE_XML_ENCODING(UA_ImagePNG)

/** @brief A mask of 32 bits that can be updated individually by using the top 32 bits as a mask. */
typedef UA_ByteString UA_BitFieldMaskDataType;
UA_TYPE_PROTOTYPES(UA_BitFieldMaskDataType)
UA_TYPE_BINARY_ENCODING(UA_BitFieldMaskDataType)
UA_TYPE_XML_ENCODING(UA_BitFieldMaskDataType)

typedef UA_UInt32 UA_OpenFileMode;
enum UA_OpenFileMode_enum { 
	UA_OPENFILEMODE_READ = 1,
	UA_OPENFILEMODE_WRITE = 2,
	UA_OPENFILEMODE_ERASEEXISITING = 4,
	UA_OPENFILEMODE_APPEND = 8
};
UA_TYPE_PROTOTYPES (UA_OpenFileMode)
UA_TYPE_BINARY_ENCODING(UA_OpenFileMode)
UA_TYPE_XML_ENCODING(UA_OpenFileMode)

/** @brief The type of identifier used in a node id. */
typedef UA_UInt32 UA_IdType;
enum UA_IdType_enum { 
	UA_IDTYPE_NUMERIC = 0,
	UA_IDTYPE_STRING = 1,
	UA_IDTYPE_GUID = 2,
	UA_IDTYPE_OPAQUE = 3
};
UA_TYPE_PROTOTYPES (UA_IdType)
UA_TYPE_BINARY_ENCODING(UA_IdType)
UA_TYPE_XML_ENCODING(UA_IdType)

/** @brief A mask specifying the class of the node. */
typedef UA_UInt32 UA_NodeClass;
enum UA_NodeClass_enum { 
	UA_NODECLASS_UNSPECIFIED = 0,
	UA_NODECLASS_OBJECT = 1,
	UA_NODECLASS_VARIABLE = 2,
	UA_NODECLASS_METHOD = 4,
	UA_NODECLASS_OBJECTTYPE = 8,
	UA_NODECLASS_VARIABLETYPE = 16,
	UA_NODECLASS_REFERENCETYPE = 32,
	UA_NODECLASS_DATATYPE = 64,
	UA_NODECLASS_VIEW = 128
};
UA_TYPE_PROTOTYPES (UA_NodeClass)
UA_TYPE_BINARY_ENCODING(UA_NodeClass)
UA_TYPE_XML_ENCODING(UA_NodeClass)

/** @brief Specifies a reference which belongs to a node. */
typedef struct UA_ReferenceNode {
	UA_NodeId referenceTypeId;
	UA_Boolean isInverse;
	UA_ExpandedNodeId targetId;
} UA_ReferenceNode;
UA_TYPE_PROTOTYPES(UA_ReferenceNode)
UA_TYPE_BINARY_ENCODING(UA_ReferenceNode)
UA_TYPE_XML_ENCODING(UA_ReferenceNode)

/** @brief An argument for a method. */
typedef struct UA_Argument {
	UA_String name;
	UA_NodeId dataType;
	UA_Int32 valueRank;
	UA_Int32 arrayDimensionsSize;
	UA_UInt32* arrayDimensions;
	UA_LocalizedText description;
} UA_Argument;
UA_TYPE_PROTOTYPES(UA_Argument)
UA_TYPE_BINARY_ENCODING(UA_Argument)
UA_TYPE_XML_ENCODING(UA_Argument)

/** @brief A mapping between a value of an enumerated type and a name and description. */
typedef struct UA_EnumValueType {
	UA_Int64 value;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
} UA_EnumValueType;
UA_TYPE_PROTOTYPES(UA_EnumValueType)
UA_TYPE_BINARY_ENCODING(UA_EnumValueType)
UA_TYPE_XML_ENCODING(UA_EnumValueType)

/** @brief A period of time measured in seconds. */
typedef UA_ByteString UA_Duration;
UA_TYPE_PROTOTYPES(UA_Duration)
UA_TYPE_BINARY_ENCODING(UA_Duration)
UA_TYPE_XML_ENCODING(UA_Duration)

/** @brief A date/time value specified in Universal Coordinated Time (UTC). */
typedef UA_ByteString UA_UtcTime;
UA_TYPE_PROTOTYPES(UA_UtcTime)
UA_TYPE_BINARY_ENCODING(UA_UtcTime)
UA_TYPE_XML_ENCODING(UA_UtcTime)

/** @brief An identifier for a user locale. */
typedef UA_ByteString UA_LocaleId;
UA_TYPE_PROTOTYPES(UA_LocaleId)
UA_TYPE_BINARY_ENCODING(UA_LocaleId)
UA_TYPE_XML_ENCODING(UA_LocaleId)

typedef struct UA_TimeZoneDataType {
	UA_Int16 offset;
	UA_Boolean daylightSavingInOffset;
} UA_TimeZoneDataType;
UA_TYPE_PROTOTYPES(UA_TimeZoneDataType)
UA_TYPE_BINARY_ENCODING(UA_TimeZoneDataType)
UA_TYPE_XML_ENCODING(UA_TimeZoneDataType)

/** @brief A numeric identifier for an object. */
typedef UA_ByteString UA_IntegerId;
UA_TYPE_PROTOTYPES(UA_IntegerId)
UA_TYPE_BINARY_ENCODING(UA_IntegerId)
UA_TYPE_XML_ENCODING(UA_IntegerId)

/** @brief The types of applications. */
typedef UA_UInt32 UA_ApplicationType;
enum UA_ApplicationType_enum { 
	UA_APPLICATIONTYPE_SERVER = 0,
	UA_APPLICATIONTYPE_CLIENT = 1,
	UA_APPLICATIONTYPE_CLIENTANDSERVER = 2,
	UA_APPLICATIONTYPE_DISCOVERYSERVER = 3
};
UA_TYPE_PROTOTYPES (UA_ApplicationType)
UA_TYPE_BINARY_ENCODING(UA_ApplicationType)
UA_TYPE_XML_ENCODING(UA_ApplicationType)

/** @brief Describes an application and how to find it. */
typedef struct UA_ApplicationDescription {
	UA_String applicationUri;
	UA_String productUri;
	UA_LocalizedText applicationName;
	UA_ApplicationType applicationType;
	UA_String gatewayServerUri;
	UA_String discoveryProfileUri;
	UA_Int32 discoveryUrlsSize;
	UA_String* discoveryUrls;
} UA_ApplicationDescription;
UA_TYPE_PROTOTYPES(UA_ApplicationDescription)
UA_TYPE_BINARY_ENCODING(UA_ApplicationDescription)
UA_TYPE_XML_ENCODING(UA_ApplicationDescription)

/** @brief The header passed with every server request. */
typedef struct UA_RequestHeader {
	UA_NodeId authenticationToken;
	UA_DateTime timestamp;
	UA_UInt32 requestHandle;
	UA_UInt32 returnDiagnostics;
	UA_String auditEntryId;
	UA_UInt32 timeoutHint;
	UA_ExtensionObject additionalHeader;
} UA_RequestHeader;
UA_TYPE_PROTOTYPES(UA_RequestHeader)
UA_TYPE_BINARY_ENCODING(UA_RequestHeader)
UA_TYPE_XML_ENCODING(UA_RequestHeader)

/** @brief The header passed with every server response. */
typedef struct UA_ResponseHeader {
	UA_DateTime timestamp;
	UA_UInt32 requestHandle;
	UA_StatusCode serviceResult;
	UA_DiagnosticInfo serviceDiagnostics;
	UA_Int32 stringTableSize;
	UA_String* stringTable;
	UA_ExtensionObject additionalHeader;
} UA_ResponseHeader;
UA_TYPE_PROTOTYPES(UA_ResponseHeader)
UA_TYPE_BINARY_ENCODING(UA_ResponseHeader)
UA_TYPE_XML_ENCODING(UA_ResponseHeader)

/** @brief The response returned by all services when there is a service level error. */
typedef struct UA_ServiceFault {
	UA_ResponseHeader responseHeader;
} UA_ServiceFault;
UA_TYPE_PROTOTYPES(UA_ServiceFault)
UA_TYPE_BINARY_ENCODING(UA_ServiceFault)
UA_TYPE_XML_ENCODING(UA_ServiceFault)

/** @brief Finds the servers known to the discovery server. */
typedef struct UA_FindServersRequest {
	UA_RequestHeader requestHeader;
	UA_String endpointUrl;
	UA_Int32 localeIdsSize;
	UA_String* localeIds;
	UA_Int32 serverUrisSize;
	UA_String* serverUris;
} UA_FindServersRequest;
UA_TYPE_PROTOTYPES(UA_FindServersRequest)
UA_TYPE_BINARY_ENCODING(UA_FindServersRequest)
UA_TYPE_XML_ENCODING(UA_FindServersRequest)

/** @brief Finds the servers known to the discovery server. */
typedef struct UA_FindServersResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 serversSize;
	UA_ApplicationDescription* servers;
} UA_FindServersResponse;
UA_TYPE_PROTOTYPES(UA_FindServersResponse)
UA_TYPE_BINARY_ENCODING(UA_FindServersResponse)
UA_TYPE_XML_ENCODING(UA_FindServersResponse)

/** @brief A certificate for an instance of an application. */
typedef UA_ByteString UA_ApplicationInstanceCertificate;
UA_TYPE_PROTOTYPES(UA_ApplicationInstanceCertificate)
UA_TYPE_BINARY_ENCODING(UA_ApplicationInstanceCertificate)
UA_TYPE_XML_ENCODING(UA_ApplicationInstanceCertificate)

/** @brief The type of security to use on a message. */
typedef UA_UInt32 UA_MessageSecurityMode;
enum UA_MessageSecurityMode_enum { 
	UA_MESSAGESECURITYMODE_INVALID = 0,
	UA_MESSAGESECURITYMODE_NONE = 1,
	UA_MESSAGESECURITYMODE_SIGN = 2,
	UA_MESSAGESECURITYMODE_SIGNANDENCRYPT = 3
};
UA_TYPE_PROTOTYPES (UA_MessageSecurityMode)
UA_TYPE_BINARY_ENCODING(UA_MessageSecurityMode)
UA_TYPE_XML_ENCODING(UA_MessageSecurityMode)

/** @brief The possible user token types. */
typedef UA_UInt32 UA_UserTokenType;
enum UA_UserTokenType_enum { 
	UA_USERTOKENTYPE_ANONYMOUS = 0,
	UA_USERTOKENTYPE_USERNAME = 1,
	UA_USERTOKENTYPE_CERTIFICATE = 2,
	UA_USERTOKENTYPE_ISSUEDTOKEN = 3
};
UA_TYPE_PROTOTYPES (UA_UserTokenType)
UA_TYPE_BINARY_ENCODING(UA_UserTokenType)
UA_TYPE_XML_ENCODING(UA_UserTokenType)

/** @brief Describes a user token that can be used with a server. */
typedef struct UA_UserTokenPolicy {
	UA_String policyId;
	UA_UserTokenType tokenType;
	UA_String issuedTokenType;
	UA_String issuerEndpointUrl;
	UA_String securityPolicyUri;
} UA_UserTokenPolicy;
UA_TYPE_PROTOTYPES(UA_UserTokenPolicy)
UA_TYPE_BINARY_ENCODING(UA_UserTokenPolicy)
UA_TYPE_XML_ENCODING(UA_UserTokenPolicy)

/** @brief The description of a endpoint that can be used to access a server. */
typedef struct UA_EndpointDescription {
	UA_String endpointUrl;
	UA_ApplicationDescription server;
	UA_ByteString serverCertificate;
	UA_MessageSecurityMode securityMode;
	UA_String securityPolicyUri;
	UA_Int32 userIdentityTokensSize;
	UA_UserTokenPolicy* userIdentityTokens;
	UA_String transportProfileUri;
	UA_Byte securityLevel;
} UA_EndpointDescription;
UA_TYPE_PROTOTYPES(UA_EndpointDescription)
UA_TYPE_BINARY_ENCODING(UA_EndpointDescription)
UA_TYPE_XML_ENCODING(UA_EndpointDescription)

/** @brief Gets the endpoints used by the server. */
typedef struct UA_GetEndpointsRequest {
	UA_RequestHeader requestHeader;
	UA_String endpointUrl;
	UA_Int32 localeIdsSize;
	UA_String* localeIds;
	UA_Int32 profileUrisSize;
	UA_String* profileUris;
} UA_GetEndpointsRequest;
UA_TYPE_PROTOTYPES(UA_GetEndpointsRequest)
UA_TYPE_BINARY_ENCODING(UA_GetEndpointsRequest)
UA_TYPE_XML_ENCODING(UA_GetEndpointsRequest)

/** @brief Gets the endpoints used by the server. */
typedef struct UA_GetEndpointsResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 endpointsSize;
	UA_EndpointDescription* endpoints;
} UA_GetEndpointsResponse;
UA_TYPE_PROTOTYPES(UA_GetEndpointsResponse)
UA_TYPE_BINARY_ENCODING(UA_GetEndpointsResponse)
UA_TYPE_XML_ENCODING(UA_GetEndpointsResponse)

/** @brief The information required to register a server with a discovery server. */
typedef struct UA_RegisteredServer {
	UA_String serverUri;
	UA_String productUri;
	UA_Int32 serverNamesSize;
	UA_LocalizedText* serverNames;
	UA_ApplicationType serverType;
	UA_String gatewayServerUri;
	UA_Int32 discoveryUrlsSize;
	UA_String* discoveryUrls;
	UA_String semaphoreFilePath;
	UA_Boolean isOnline;
} UA_RegisteredServer;
UA_TYPE_PROTOTYPES(UA_RegisteredServer)
UA_TYPE_BINARY_ENCODING(UA_RegisteredServer)
UA_TYPE_XML_ENCODING(UA_RegisteredServer)

/** @brief Registers a server with the discovery server. */
typedef struct UA_RegisterServerRequest {
	UA_RequestHeader requestHeader;
	UA_RegisteredServer server;
} UA_RegisterServerRequest;
UA_TYPE_PROTOTYPES(UA_RegisterServerRequest)
UA_TYPE_BINARY_ENCODING(UA_RegisterServerRequest)
UA_TYPE_XML_ENCODING(UA_RegisterServerRequest)

/** @brief Registers a server with the discovery server. */
typedef struct UA_RegisterServerResponse {
	UA_ResponseHeader responseHeader;
} UA_RegisterServerResponse;
UA_TYPE_PROTOTYPES(UA_RegisterServerResponse)
UA_TYPE_BINARY_ENCODING(UA_RegisterServerResponse)
UA_TYPE_XML_ENCODING(UA_RegisterServerResponse)

/** @brief Indicates whether a token if being created or renewed. */
typedef UA_UInt32 UA_SecurityTokenRequestType;
enum UA_SecurityTokenRequestType_enum { 
	UA_SECURITYTOKENREQUESTTYPE_ISSUE = 0,
	UA_SECURITYTOKENREQUESTTYPE_RENEW = 1
};
UA_TYPE_PROTOTYPES (UA_SecurityTokenRequestType)
UA_TYPE_BINARY_ENCODING(UA_SecurityTokenRequestType)
UA_TYPE_XML_ENCODING(UA_SecurityTokenRequestType)

/** @brief The token that identifies a set of keys for an active secure channel. */
typedef struct UA_ChannelSecurityToken {
	UA_UInt32 channelId;
	UA_UInt32 tokenId;
	UA_DateTime createdAt;
	UA_UInt32 revisedLifetime;
} UA_ChannelSecurityToken;
UA_TYPE_PROTOTYPES(UA_ChannelSecurityToken)
UA_TYPE_BINARY_ENCODING(UA_ChannelSecurityToken)
UA_TYPE_XML_ENCODING(UA_ChannelSecurityToken)

/** @brief Creates a secure channel with a server. */
typedef struct UA_OpenSecureChannelRequest {
	UA_RequestHeader requestHeader;
	UA_UInt32 clientProtocolVersion;
	UA_SecurityTokenRequestType requestType;
	UA_MessageSecurityMode securityMode;
	UA_ByteString clientNonce;
	UA_UInt32 requestedLifetime;
} UA_OpenSecureChannelRequest;
UA_TYPE_PROTOTYPES(UA_OpenSecureChannelRequest)
UA_TYPE_BINARY_ENCODING(UA_OpenSecureChannelRequest)
UA_TYPE_XML_ENCODING(UA_OpenSecureChannelRequest)

/** @brief Creates a secure channel with a server. */
typedef struct UA_OpenSecureChannelResponse {
	UA_ResponseHeader responseHeader;
	UA_UInt32 serverProtocolVersion;
	UA_ChannelSecurityToken securityToken;
	UA_ByteString serverNonce;
} UA_OpenSecureChannelResponse;
UA_TYPE_PROTOTYPES(UA_OpenSecureChannelResponse)
UA_TYPE_BINARY_ENCODING(UA_OpenSecureChannelResponse)
UA_TYPE_XML_ENCODING(UA_OpenSecureChannelResponse)

/** @brief Closes a secure channel. */
typedef struct UA_CloseSecureChannelRequest {
	UA_RequestHeader requestHeader;
} UA_CloseSecureChannelRequest;
UA_TYPE_PROTOTYPES(UA_CloseSecureChannelRequest)
UA_TYPE_BINARY_ENCODING(UA_CloseSecureChannelRequest)
UA_TYPE_XML_ENCODING(UA_CloseSecureChannelRequest)

/** @brief Closes a secure channel. */
typedef struct UA_CloseSecureChannelResponse {
	UA_ResponseHeader responseHeader;
} UA_CloseSecureChannelResponse;
UA_TYPE_PROTOTYPES(UA_CloseSecureChannelResponse)
UA_TYPE_BINARY_ENCODING(UA_CloseSecureChannelResponse)
UA_TYPE_XML_ENCODING(UA_CloseSecureChannelResponse)

/** @brief A software certificate with a digital signature. */
typedef struct UA_SignedSoftwareCertificate {
	UA_ByteString certificateData;
	UA_ByteString signature;
} UA_SignedSoftwareCertificate;
UA_TYPE_PROTOTYPES(UA_SignedSoftwareCertificate)
UA_TYPE_BINARY_ENCODING(UA_SignedSoftwareCertificate)
UA_TYPE_XML_ENCODING(UA_SignedSoftwareCertificate)

/** @brief A unique identifier for a session used to authenticate requests. */
typedef UA_ByteString UA_SessionAuthenticationToken;
UA_TYPE_PROTOTYPES(UA_SessionAuthenticationToken)
UA_TYPE_BINARY_ENCODING(UA_SessionAuthenticationToken)
UA_TYPE_XML_ENCODING(UA_SessionAuthenticationToken)

/** @brief A digital signature. */
typedef struct UA_SignatureData {
	UA_String algorithm;
	UA_ByteString signature;
} UA_SignatureData;
UA_TYPE_PROTOTYPES(UA_SignatureData)
UA_TYPE_BINARY_ENCODING(UA_SignatureData)
UA_TYPE_XML_ENCODING(UA_SignatureData)

/** @brief Creates a new session with the server. */
typedef struct UA_CreateSessionRequest {
	UA_RequestHeader requestHeader;
	UA_ApplicationDescription clientDescription;
	UA_String serverUri;
	UA_String endpointUrl;
	UA_String sessionName;
	UA_ByteString clientNonce;
	UA_ByteString clientCertificate;
	UA_Double requestedSessionTimeout;
	UA_UInt32 maxResponseMessageSize;
} UA_CreateSessionRequest;
UA_TYPE_PROTOTYPES(UA_CreateSessionRequest)
UA_TYPE_BINARY_ENCODING(UA_CreateSessionRequest)
UA_TYPE_XML_ENCODING(UA_CreateSessionRequest)

/** @brief Creates a new session with the server. */
typedef struct UA_CreateSessionResponse {
	UA_ResponseHeader responseHeader;
	UA_NodeId sessionId;
	UA_NodeId authenticationToken;
	UA_Double revisedSessionTimeout;
	UA_ByteString serverNonce;
	UA_ByteString serverCertificate;
	UA_Int32 serverEndpointsSize;
	UA_EndpointDescription* serverEndpoints;
	UA_Int32 serverSoftwareCertificatesSize;
	UA_SignedSoftwareCertificate* serverSoftwareCertificates;
	UA_SignatureData serverSignature;
	UA_UInt32 maxRequestMessageSize;
} UA_CreateSessionResponse;
UA_TYPE_PROTOTYPES(UA_CreateSessionResponse)
UA_TYPE_BINARY_ENCODING(UA_CreateSessionResponse)
UA_TYPE_XML_ENCODING(UA_CreateSessionResponse)

/** @brief A base type for a user identity token. */
typedef struct UA_UserIdentityToken {
	UA_String policyId;
} UA_UserIdentityToken;
UA_TYPE_PROTOTYPES(UA_UserIdentityToken)
UA_TYPE_BINARY_ENCODING(UA_UserIdentityToken)
UA_TYPE_XML_ENCODING(UA_UserIdentityToken)

/** @brief A token representing an anonymous user. */
typedef struct UA_AnonymousIdentityToken {
	UA_String policyId;
} UA_AnonymousIdentityToken;
UA_TYPE_PROTOTYPES(UA_AnonymousIdentityToken)
UA_TYPE_BINARY_ENCODING(UA_AnonymousIdentityToken)
UA_TYPE_XML_ENCODING(UA_AnonymousIdentityToken)

/** @brief A token representing a user identified by a user name and password. */
typedef struct UA_UserNameIdentityToken {
	UA_String policyId;
	UA_String userName;
	UA_ByteString password;
	UA_String encryptionAlgorithm;
} UA_UserNameIdentityToken;
UA_TYPE_PROTOTYPES(UA_UserNameIdentityToken)
UA_TYPE_BINARY_ENCODING(UA_UserNameIdentityToken)
UA_TYPE_XML_ENCODING(UA_UserNameIdentityToken)

/** @brief A token representing a user identified by an X509 certificate. */
typedef struct UA_X509IdentityToken {
	UA_String policyId;
	UA_ByteString certificateData;
} UA_X509IdentityToken;
UA_TYPE_PROTOTYPES(UA_X509IdentityToken)
UA_TYPE_BINARY_ENCODING(UA_X509IdentityToken)
UA_TYPE_XML_ENCODING(UA_X509IdentityToken)

/** @brief A token representing a user identified by a WS-Security XML token. */
typedef struct UA_IssuedIdentityToken {
	UA_String policyId;
	UA_ByteString tokenData;
	UA_String encryptionAlgorithm;
} UA_IssuedIdentityToken;
UA_TYPE_PROTOTYPES(UA_IssuedIdentityToken)
UA_TYPE_BINARY_ENCODING(UA_IssuedIdentityToken)
UA_TYPE_XML_ENCODING(UA_IssuedIdentityToken)

/** @brief Activates a session with the server. */
typedef struct UA_ActivateSessionRequest {
	UA_RequestHeader requestHeader;
	UA_SignatureData clientSignature;
	UA_Int32 clientSoftwareCertificatesSize;
	UA_SignedSoftwareCertificate* clientSoftwareCertificates;
	UA_Int32 localeIdsSize;
	UA_String* localeIds;
	UA_ExtensionObject userIdentityToken;
	UA_SignatureData userTokenSignature;
} UA_ActivateSessionRequest;
UA_TYPE_PROTOTYPES(UA_ActivateSessionRequest)
UA_TYPE_BINARY_ENCODING(UA_ActivateSessionRequest)
UA_TYPE_XML_ENCODING(UA_ActivateSessionRequest)

/** @brief Activates a session with the server. */
typedef struct UA_ActivateSessionResponse {
	UA_ResponseHeader responseHeader;
	UA_ByteString serverNonce;
	UA_Int32 resultsSize;
	UA_StatusCode* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_ActivateSessionResponse;
UA_TYPE_PROTOTYPES(UA_ActivateSessionResponse)
UA_TYPE_BINARY_ENCODING(UA_ActivateSessionResponse)
UA_TYPE_XML_ENCODING(UA_ActivateSessionResponse)

/** @brief Closes a session with the server. */
typedef struct UA_CloseSessionRequest {
	UA_RequestHeader requestHeader;
	UA_Boolean deleteSubscriptions;
} UA_CloseSessionRequest;
UA_TYPE_PROTOTYPES(UA_CloseSessionRequest)
UA_TYPE_BINARY_ENCODING(UA_CloseSessionRequest)
UA_TYPE_XML_ENCODING(UA_CloseSessionRequest)

/** @brief Closes a session with the server. */
typedef struct UA_CloseSessionResponse {
	UA_ResponseHeader responseHeader;
} UA_CloseSessionResponse;
UA_TYPE_PROTOTYPES(UA_CloseSessionResponse)
UA_TYPE_BINARY_ENCODING(UA_CloseSessionResponse)
UA_TYPE_XML_ENCODING(UA_CloseSessionResponse)

/** @brief Cancels an outstanding request. */
typedef struct UA_CancelRequest {
	UA_RequestHeader requestHeader;
	UA_UInt32 requestHandle;
} UA_CancelRequest;
UA_TYPE_PROTOTYPES(UA_CancelRequest)
UA_TYPE_BINARY_ENCODING(UA_CancelRequest)
UA_TYPE_XML_ENCODING(UA_CancelRequest)

/** @brief Cancels an outstanding request. */
typedef struct UA_CancelResponse {
	UA_ResponseHeader responseHeader;
	UA_UInt32 cancelCount;
} UA_CancelResponse;
UA_TYPE_PROTOTYPES(UA_CancelResponse)
UA_TYPE_BINARY_ENCODING(UA_CancelResponse)
UA_TYPE_XML_ENCODING(UA_CancelResponse)

/** @brief The bits used to specify default attributes for a new node. */
typedef UA_UInt32 UA_NodeAttributesMask;
enum UA_NodeAttributesMask_enum { 
	UA_NODEATTRIBUTESMASK_NONE = 0,
	UA_NODEATTRIBUTESMASK_ACCESSLEVEL = 1,
	UA_NODEATTRIBUTESMASK_ARRAYDIMENSIONS = 2,
	UA_NODEATTRIBUTESMASK_BROWSENAME = 4,
	UA_NODEATTRIBUTESMASK_CONTAINSNOLOOPS = 8,
	UA_NODEATTRIBUTESMASK_DATATYPE = 16,
	UA_NODEATTRIBUTESMASK_DESCRIPTION = 32,
	UA_NODEATTRIBUTESMASK_DISPLAYNAME = 64,
	UA_NODEATTRIBUTESMASK_EVENTNOTIFIER = 128,
	UA_NODEATTRIBUTESMASK_EXECUTABLE = 256,
	UA_NODEATTRIBUTESMASK_HISTORIZING = 512,
	UA_NODEATTRIBUTESMASK_INVERSENAME = 1024,
	UA_NODEATTRIBUTESMASK_ISABSTRACT = 2048,
	UA_NODEATTRIBUTESMASK_MINIMUMSAMPLINGINTERVAL = 4096,
	UA_NODEATTRIBUTESMASK_NODECLASS = 8192,
	UA_NODEATTRIBUTESMASK_NODEID = 16384,
	UA_NODEATTRIBUTESMASK_SYMMETRIC = 32768,
	UA_NODEATTRIBUTESMASK_USERACCESSLEVEL = 65536,
	UA_NODEATTRIBUTESMASK_USEREXECUTABLE = 131072,
	UA_NODEATTRIBUTESMASK_USERWRITEMASK = 262144,
	UA_NODEATTRIBUTESMASK_VALUERANK = 524288,
	UA_NODEATTRIBUTESMASK_WRITEMASK = 1048576,
	UA_NODEATTRIBUTESMASK_BASENODE = 1335396,
	UA_NODEATTRIBUTESMASK_OBJECT = 1335524,
	UA_NODEATTRIBUTESMASK_VIEW = 1335532,
	UA_NODEATTRIBUTESMASK_OBJECTTYPEORDATATYPE = 1337444,
	UA_NODEATTRIBUTESMASK_REFERENCETYPE = 1371236,
	UA_NODEATTRIBUTESMASK_METHOD = 1466724,
	UA_NODEATTRIBUTESMASK_VALUE = 2097152,
	UA_NODEATTRIBUTESMASK_VARIABLETYPE = 3958902,
	UA_NODEATTRIBUTESMASK_VARIABLE = 4026999,
	UA_NODEATTRIBUTESMASK_ALL = 4194303
};
UA_TYPE_PROTOTYPES (UA_NodeAttributesMask)
UA_TYPE_BINARY_ENCODING(UA_NodeAttributesMask)
UA_TYPE_XML_ENCODING(UA_NodeAttributesMask)

/** @brief The base attributes for all nodes. */
typedef struct UA_NodeAttributes {
	UA_UInt32 specifiedAttributes;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
} UA_NodeAttributes;
UA_TYPE_PROTOTYPES(UA_NodeAttributes)
UA_TYPE_BINARY_ENCODING(UA_NodeAttributes)
UA_TYPE_XML_ENCODING(UA_NodeAttributes)

/** @brief The attributes for an object node. */
typedef struct UA_ObjectAttributes {
	UA_UInt32 specifiedAttributes;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Byte eventNotifier;
} UA_ObjectAttributes;
UA_TYPE_PROTOTYPES(UA_ObjectAttributes)
UA_TYPE_BINARY_ENCODING(UA_ObjectAttributes)
UA_TYPE_XML_ENCODING(UA_ObjectAttributes)

/** @brief The attributes for a variable node. */
typedef struct UA_VariableAttributes {
	UA_UInt32 specifiedAttributes;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Variant value;
	UA_NodeId dataType;
	UA_Int32 valueRank;
	UA_Int32 arrayDimensionsSize;
	UA_UInt32* arrayDimensions;
	UA_Byte accessLevel;
	UA_Byte userAccessLevel;
	UA_Double minimumSamplingInterval;
	UA_Boolean historizing;
} UA_VariableAttributes;
UA_TYPE_PROTOTYPES(UA_VariableAttributes)
UA_TYPE_BINARY_ENCODING(UA_VariableAttributes)
UA_TYPE_XML_ENCODING(UA_VariableAttributes)

/** @brief The attributes for a method node. */
typedef struct UA_MethodAttributes {
	UA_UInt32 specifiedAttributes;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Boolean executable;
	UA_Boolean userExecutable;
} UA_MethodAttributes;
UA_TYPE_PROTOTYPES(UA_MethodAttributes)
UA_TYPE_BINARY_ENCODING(UA_MethodAttributes)
UA_TYPE_XML_ENCODING(UA_MethodAttributes)

/** @brief The attributes for an object type node. */
typedef struct UA_ObjectTypeAttributes {
	UA_UInt32 specifiedAttributes;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Boolean isAbstract;
} UA_ObjectTypeAttributes;
UA_TYPE_PROTOTYPES(UA_ObjectTypeAttributes)
UA_TYPE_BINARY_ENCODING(UA_ObjectTypeAttributes)
UA_TYPE_XML_ENCODING(UA_ObjectTypeAttributes)

/** @brief The attributes for a variable type node. */
typedef struct UA_VariableTypeAttributes {
	UA_UInt32 specifiedAttributes;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Variant value;
	UA_NodeId dataType;
	UA_Int32 valueRank;
	UA_Int32 arrayDimensionsSize;
	UA_UInt32* arrayDimensions;
	UA_Boolean isAbstract;
} UA_VariableTypeAttributes;
UA_TYPE_PROTOTYPES(UA_VariableTypeAttributes)
UA_TYPE_BINARY_ENCODING(UA_VariableTypeAttributes)
UA_TYPE_XML_ENCODING(UA_VariableTypeAttributes)

/** @brief The attributes for a reference type node. */
typedef struct UA_ReferenceTypeAttributes {
	UA_UInt32 specifiedAttributes;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Boolean isAbstract;
	UA_Boolean symmetric;
	UA_LocalizedText inverseName;
} UA_ReferenceTypeAttributes;
UA_TYPE_PROTOTYPES(UA_ReferenceTypeAttributes)
UA_TYPE_BINARY_ENCODING(UA_ReferenceTypeAttributes)
UA_TYPE_XML_ENCODING(UA_ReferenceTypeAttributes)

/** @brief The attributes for a data type node. */
typedef struct UA_DataTypeAttributes {
	UA_UInt32 specifiedAttributes;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Boolean isAbstract;
} UA_DataTypeAttributes;
UA_TYPE_PROTOTYPES(UA_DataTypeAttributes)
UA_TYPE_BINARY_ENCODING(UA_DataTypeAttributes)
UA_TYPE_XML_ENCODING(UA_DataTypeAttributes)

/** @brief The attributes for a view node. */
typedef struct UA_ViewAttributes {
	UA_UInt32 specifiedAttributes;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Boolean containsNoLoops;
	UA_Byte eventNotifier;
} UA_ViewAttributes;
UA_TYPE_PROTOTYPES(UA_ViewAttributes)
UA_TYPE_BINARY_ENCODING(UA_ViewAttributes)
UA_TYPE_XML_ENCODING(UA_ViewAttributes)

/** @brief A request to add a node to the server address space. */
typedef struct UA_AddNodesItem {
	UA_ExpandedNodeId parentNodeId;
	UA_NodeId referenceTypeId;
	UA_ExpandedNodeId requestedNewNodeId;
	UA_QualifiedName browseName;
	UA_NodeClass nodeClass;
	UA_ExtensionObject nodeAttributes;
	UA_ExpandedNodeId typeDefinition;
} UA_AddNodesItem;
UA_TYPE_PROTOTYPES(UA_AddNodesItem)
UA_TYPE_BINARY_ENCODING(UA_AddNodesItem)
UA_TYPE_XML_ENCODING(UA_AddNodesItem)

/** @brief A result of an add node operation. */
typedef struct UA_AddNodesResult {
	UA_StatusCode statusCode;
	UA_NodeId addedNodeId;
} UA_AddNodesResult;
UA_TYPE_PROTOTYPES(UA_AddNodesResult)
UA_TYPE_BINARY_ENCODING(UA_AddNodesResult)
UA_TYPE_XML_ENCODING(UA_AddNodesResult)

/** @brief Adds one or more nodes to the server address space. */
typedef struct UA_AddNodesRequest {
	UA_RequestHeader requestHeader;
	UA_Int32 nodesToAddSize;
	UA_AddNodesItem* nodesToAdd;
} UA_AddNodesRequest;
UA_TYPE_PROTOTYPES(UA_AddNodesRequest)
UA_TYPE_BINARY_ENCODING(UA_AddNodesRequest)
UA_TYPE_XML_ENCODING(UA_AddNodesRequest)

/** @brief Adds one or more nodes to the server address space. */
typedef struct UA_AddNodesResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_AddNodesResult* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_AddNodesResponse;
UA_TYPE_PROTOTYPES(UA_AddNodesResponse)
UA_TYPE_BINARY_ENCODING(UA_AddNodesResponse)
UA_TYPE_XML_ENCODING(UA_AddNodesResponse)

/** @brief A request to add a reference to the server address space. */
typedef struct UA_AddReferencesItem {
	UA_NodeId sourceNodeId;
	UA_NodeId referenceTypeId;
	UA_Boolean isForward;
	UA_String targetServerUri;
	UA_ExpandedNodeId targetNodeId;
	UA_NodeClass targetNodeClass;
} UA_AddReferencesItem;
UA_TYPE_PROTOTYPES(UA_AddReferencesItem)
UA_TYPE_BINARY_ENCODING(UA_AddReferencesItem)
UA_TYPE_XML_ENCODING(UA_AddReferencesItem)

/** @brief Adds one or more references to the server address space. */
typedef struct UA_AddReferencesRequest {
	UA_RequestHeader requestHeader;
	UA_Int32 referencesToAddSize;
	UA_AddReferencesItem* referencesToAdd;
} UA_AddReferencesRequest;
UA_TYPE_PROTOTYPES(UA_AddReferencesRequest)
UA_TYPE_BINARY_ENCODING(UA_AddReferencesRequest)
UA_TYPE_XML_ENCODING(UA_AddReferencesRequest)

/** @brief Adds one or more references to the server address space. */
typedef struct UA_AddReferencesResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_StatusCode* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_AddReferencesResponse;
UA_TYPE_PROTOTYPES(UA_AddReferencesResponse)
UA_TYPE_BINARY_ENCODING(UA_AddReferencesResponse)
UA_TYPE_XML_ENCODING(UA_AddReferencesResponse)

/** @brief A request to delete a node to the server address space. */
typedef struct UA_DeleteNodesItem {
	UA_NodeId nodeId;
	UA_Boolean deleteTargetReferences;
} UA_DeleteNodesItem;
UA_TYPE_PROTOTYPES(UA_DeleteNodesItem)
UA_TYPE_BINARY_ENCODING(UA_DeleteNodesItem)
UA_TYPE_XML_ENCODING(UA_DeleteNodesItem)

/** @brief Delete one or more nodes from the server address space. */
typedef struct UA_DeleteNodesRequest {
	UA_RequestHeader requestHeader;
	UA_Int32 nodesToDeleteSize;
	UA_DeleteNodesItem* nodesToDelete;
} UA_DeleteNodesRequest;
UA_TYPE_PROTOTYPES(UA_DeleteNodesRequest)
UA_TYPE_BINARY_ENCODING(UA_DeleteNodesRequest)
UA_TYPE_XML_ENCODING(UA_DeleteNodesRequest)

/** @brief Delete one or more nodes from the server address space. */
typedef struct UA_DeleteNodesResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_StatusCode* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_DeleteNodesResponse;
UA_TYPE_PROTOTYPES(UA_DeleteNodesResponse)
UA_TYPE_BINARY_ENCODING(UA_DeleteNodesResponse)
UA_TYPE_XML_ENCODING(UA_DeleteNodesResponse)

/** @brief A request to delete a node from the server address space. */
typedef struct UA_DeleteReferencesItem {
	UA_NodeId sourceNodeId;
	UA_NodeId referenceTypeId;
	UA_Boolean isForward;
	UA_ExpandedNodeId targetNodeId;
	UA_Boolean deleteBidirectional;
} UA_DeleteReferencesItem;
UA_TYPE_PROTOTYPES(UA_DeleteReferencesItem)
UA_TYPE_BINARY_ENCODING(UA_DeleteReferencesItem)
UA_TYPE_XML_ENCODING(UA_DeleteReferencesItem)

/** @brief Delete one or more references from the server address space. */
typedef struct UA_DeleteReferencesRequest {
	UA_RequestHeader requestHeader;
	UA_Int32 referencesToDeleteSize;
	UA_DeleteReferencesItem* referencesToDelete;
} UA_DeleteReferencesRequest;
UA_TYPE_PROTOTYPES(UA_DeleteReferencesRequest)
UA_TYPE_BINARY_ENCODING(UA_DeleteReferencesRequest)
UA_TYPE_XML_ENCODING(UA_DeleteReferencesRequest)

/** @brief Delete one or more references from the server address space. */
typedef struct UA_DeleteReferencesResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_StatusCode* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_DeleteReferencesResponse;
UA_TYPE_PROTOTYPES(UA_DeleteReferencesResponse)
UA_TYPE_BINARY_ENCODING(UA_DeleteReferencesResponse)
UA_TYPE_XML_ENCODING(UA_DeleteReferencesResponse)

/** @brief Define bits used to indicate which attributes are writeable. */
typedef UA_UInt32 UA_AttributeWriteMask;
enum UA_AttributeWriteMask_enum { 
	UA_ATTRIBUTEWRITEMASK_NONE = 0,
	UA_ATTRIBUTEWRITEMASK_ACCESSLEVEL = 1,
	UA_ATTRIBUTEWRITEMASK_ARRAYDIMENSIONS = 2,
	UA_ATTRIBUTEWRITEMASK_BROWSENAME = 4,
	UA_ATTRIBUTEWRITEMASK_CONTAINSNOLOOPS = 8,
	UA_ATTRIBUTEWRITEMASK_DATATYPE = 16,
	UA_ATTRIBUTEWRITEMASK_DESCRIPTION = 32,
	UA_ATTRIBUTEWRITEMASK_DISPLAYNAME = 64,
	UA_ATTRIBUTEWRITEMASK_EVENTNOTIFIER = 128,
	UA_ATTRIBUTEWRITEMASK_EXECUTABLE = 256,
	UA_ATTRIBUTEWRITEMASK_HISTORIZING = 512,
	UA_ATTRIBUTEWRITEMASK_INVERSENAME = 1024,
	UA_ATTRIBUTEWRITEMASK_ISABSTRACT = 2048,
	UA_ATTRIBUTEWRITEMASK_MINIMUMSAMPLINGINTERVAL = 4096,
	UA_ATTRIBUTEWRITEMASK_NODECLASS = 8192,
	UA_ATTRIBUTEWRITEMASK_NODEID = 16384,
	UA_ATTRIBUTEWRITEMASK_SYMMETRIC = 32768,
	UA_ATTRIBUTEWRITEMASK_USERACCESSLEVEL = 65536,
	UA_ATTRIBUTEWRITEMASK_USEREXECUTABLE = 131072,
	UA_ATTRIBUTEWRITEMASK_USERWRITEMASK = 262144,
	UA_ATTRIBUTEWRITEMASK_VALUERANK = 524288,
	UA_ATTRIBUTEWRITEMASK_WRITEMASK = 1048576,
	UA_ATTRIBUTEWRITEMASK_VALUEFORVARIABLETYPE = 2097152
};
UA_TYPE_PROTOTYPES (UA_AttributeWriteMask)
UA_TYPE_BINARY_ENCODING(UA_AttributeWriteMask)
UA_TYPE_XML_ENCODING(UA_AttributeWriteMask)

/** @brief The directions of the references to return. */
typedef UA_UInt32 UA_BrowseDirection;
enum UA_BrowseDirection_enum { 
	UA_BROWSEDIRECTION_FORWARD = 0,
	UA_BROWSEDIRECTION_INVERSE = 1,
	UA_BROWSEDIRECTION_BOTH = 2
};
UA_TYPE_PROTOTYPES (UA_BrowseDirection)
UA_TYPE_BINARY_ENCODING(UA_BrowseDirection)
UA_TYPE_XML_ENCODING(UA_BrowseDirection)

/** @brief The view to browse. */
typedef struct UA_ViewDescription {
	UA_NodeId viewId;
	UA_DateTime timestamp;
	UA_UInt32 viewVersion;
} UA_ViewDescription;
UA_TYPE_PROTOTYPES(UA_ViewDescription)
UA_TYPE_BINARY_ENCODING(UA_ViewDescription)
UA_TYPE_XML_ENCODING(UA_ViewDescription)

/** @brief A request to browse the the references from a node. */
typedef struct UA_BrowseDescription {
	UA_NodeId nodeId;
	UA_BrowseDirection browseDirection;
	UA_NodeId referenceTypeId;
	UA_Boolean includeSubtypes;
	UA_UInt32 nodeClassMask;
	UA_UInt32 resultMask;
} UA_BrowseDescription;
UA_TYPE_PROTOTYPES(UA_BrowseDescription)
UA_TYPE_BINARY_ENCODING(UA_BrowseDescription)
UA_TYPE_XML_ENCODING(UA_BrowseDescription)

/** @brief A bit mask which specifies what should be returned in a browse response. */
typedef UA_UInt32 UA_BrowseResultMask;
enum UA_BrowseResultMask_enum { 
	UA_BROWSERESULTMASK_NONE = 0,
	UA_BROWSERESULTMASK_REFERENCETYPEID = 1,
	UA_BROWSERESULTMASK_ISFORWARD = 2,
	UA_BROWSERESULTMASK_REFERENCETYPEINFO = 3,
	UA_BROWSERESULTMASK_NODECLASS = 4,
	UA_BROWSERESULTMASK_BROWSENAME = 8,
	UA_BROWSERESULTMASK_DISPLAYNAME = 16,
	UA_BROWSERESULTMASK_TYPEDEFINITION = 32,
	UA_BROWSERESULTMASK_TARGETINFO = 60,
	UA_BROWSERESULTMASK_ALL = 63
};
UA_TYPE_PROTOTYPES (UA_BrowseResultMask)
UA_TYPE_BINARY_ENCODING(UA_BrowseResultMask)
UA_TYPE_XML_ENCODING(UA_BrowseResultMask)

/** @brief The description of a reference. */
typedef struct UA_ReferenceDescription {
	UA_NodeId referenceTypeId;
	UA_Boolean isForward;
	UA_ExpandedNodeId nodeId;
	UA_QualifiedName browseName;
	UA_LocalizedText displayName;
	UA_NodeClass nodeClass;
	UA_ExpandedNodeId typeDefinition;
} UA_ReferenceDescription;
UA_TYPE_PROTOTYPES(UA_ReferenceDescription)
UA_TYPE_BINARY_ENCODING(UA_ReferenceDescription)
UA_TYPE_XML_ENCODING(UA_ReferenceDescription)

/** @brief An identifier for a suspended query or browse operation. */
typedef UA_ByteString UA_ContinuationPoint;
UA_TYPE_PROTOTYPES(UA_ContinuationPoint)
UA_TYPE_BINARY_ENCODING(UA_ContinuationPoint)
UA_TYPE_XML_ENCODING(UA_ContinuationPoint)

/** @brief The result of a browse operation. */
typedef struct UA_BrowseResult {
	UA_StatusCode statusCode;
	UA_ByteString continuationPoint;
	UA_Int32 referencesSize;
	UA_ReferenceDescription* references;
} UA_BrowseResult;
UA_TYPE_PROTOTYPES(UA_BrowseResult)
UA_TYPE_BINARY_ENCODING(UA_BrowseResult)
UA_TYPE_XML_ENCODING(UA_BrowseResult)

/** @brief Browse the references for one or more nodes from the server address space. */
typedef struct UA_BrowseRequest {
	UA_RequestHeader requestHeader;
	UA_ViewDescription view;
	UA_UInt32 requestedMaxReferencesPerNode;
	UA_Int32 nodesToBrowseSize;
	UA_BrowseDescription* nodesToBrowse;
} UA_BrowseRequest;
UA_TYPE_PROTOTYPES(UA_BrowseRequest)
UA_TYPE_BINARY_ENCODING(UA_BrowseRequest)
UA_TYPE_XML_ENCODING(UA_BrowseRequest)

/** @brief Browse the references for one or more nodes from the server address space. */
typedef struct UA_BrowseResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_BrowseResult* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_BrowseResponse;
UA_TYPE_PROTOTYPES(UA_BrowseResponse)
UA_TYPE_BINARY_ENCODING(UA_BrowseResponse)
UA_TYPE_XML_ENCODING(UA_BrowseResponse)

/** @brief Continues one or more browse operations. */
typedef struct UA_BrowseNextRequest {
	UA_RequestHeader requestHeader;
	UA_Boolean releaseContinuationPoints;
	UA_Int32 continuationPointsSize;
	UA_ByteString* continuationPoints;
} UA_BrowseNextRequest;
UA_TYPE_PROTOTYPES(UA_BrowseNextRequest)
UA_TYPE_BINARY_ENCODING(UA_BrowseNextRequest)
UA_TYPE_XML_ENCODING(UA_BrowseNextRequest)

/** @brief Continues one or more browse operations. */
typedef struct UA_BrowseNextResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_BrowseResult* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_BrowseNextResponse;
UA_TYPE_PROTOTYPES(UA_BrowseNextResponse)
UA_TYPE_BINARY_ENCODING(UA_BrowseNextResponse)
UA_TYPE_XML_ENCODING(UA_BrowseNextResponse)

/** @brief An element in a relative path. */
typedef struct UA_RelativePathElement {
	UA_NodeId referenceTypeId;
	UA_Boolean isInverse;
	UA_Boolean includeSubtypes;
	UA_QualifiedName targetName;
} UA_RelativePathElement;
UA_TYPE_PROTOTYPES(UA_RelativePathElement)
UA_TYPE_BINARY_ENCODING(UA_RelativePathElement)
UA_TYPE_XML_ENCODING(UA_RelativePathElement)

/** @brief A relative path constructed from reference types and browse names. */
typedef struct UA_RelativePath {
	UA_Int32 elementsSize;
	UA_RelativePathElement* elements;
} UA_RelativePath;
UA_TYPE_PROTOTYPES(UA_RelativePath)
UA_TYPE_BINARY_ENCODING(UA_RelativePath)
UA_TYPE_XML_ENCODING(UA_RelativePath)

/** @brief A request to translate a path into a node id. */
typedef struct UA_BrowsePath {
	UA_NodeId startingNode;
	UA_RelativePath relativePath;
} UA_BrowsePath;
UA_TYPE_PROTOTYPES(UA_BrowsePath)
UA_TYPE_BINARY_ENCODING(UA_BrowsePath)
UA_TYPE_XML_ENCODING(UA_BrowsePath)

/** @brief The target of the translated path. */
typedef struct UA_BrowsePathTarget {
	UA_ExpandedNodeId targetId;
	UA_UInt32 remainingPathIndex;
} UA_BrowsePathTarget;
UA_TYPE_PROTOTYPES(UA_BrowsePathTarget)
UA_TYPE_BINARY_ENCODING(UA_BrowsePathTarget)
UA_TYPE_XML_ENCODING(UA_BrowsePathTarget)

/** @brief The result of a translate opearation. */
typedef struct UA_BrowsePathResult {
	UA_StatusCode statusCode;
	UA_Int32 targetsSize;
	UA_BrowsePathTarget* targets;
} UA_BrowsePathResult;
UA_TYPE_PROTOTYPES(UA_BrowsePathResult)
UA_TYPE_BINARY_ENCODING(UA_BrowsePathResult)
UA_TYPE_XML_ENCODING(UA_BrowsePathResult)

/** @brief Translates one or more paths in the server address space. */
typedef struct UA_TranslateBrowsePathsToNodeIdsRequest {
	UA_RequestHeader requestHeader;
	UA_Int32 browsePathsSize;
	UA_BrowsePath* browsePaths;
} UA_TranslateBrowsePathsToNodeIdsRequest;
UA_TYPE_PROTOTYPES(UA_TranslateBrowsePathsToNodeIdsRequest)
UA_TYPE_BINARY_ENCODING(UA_TranslateBrowsePathsToNodeIdsRequest)
UA_TYPE_XML_ENCODING(UA_TranslateBrowsePathsToNodeIdsRequest)

/** @brief Translates one or more paths in the server address space. */
typedef struct UA_TranslateBrowsePathsToNodeIdsResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_BrowsePathResult* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_TranslateBrowsePathsToNodeIdsResponse;
UA_TYPE_PROTOTYPES(UA_TranslateBrowsePathsToNodeIdsResponse)
UA_TYPE_BINARY_ENCODING(UA_TranslateBrowsePathsToNodeIdsResponse)
UA_TYPE_XML_ENCODING(UA_TranslateBrowsePathsToNodeIdsResponse)

/** @brief Registers one or more nodes for repeated use within a session. */
typedef struct UA_RegisterNodesRequest {
	UA_RequestHeader requestHeader;
	UA_Int32 nodesToRegisterSize;
	UA_NodeId* nodesToRegister;
} UA_RegisterNodesRequest;
UA_TYPE_PROTOTYPES(UA_RegisterNodesRequest)
UA_TYPE_BINARY_ENCODING(UA_RegisterNodesRequest)
UA_TYPE_XML_ENCODING(UA_RegisterNodesRequest)

/** @brief Registers one or more nodes for repeated use within a session. */
typedef struct UA_RegisterNodesResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 registeredNodeIdsSize;
	UA_NodeId* registeredNodeIds;
} UA_RegisterNodesResponse;
UA_TYPE_PROTOTYPES(UA_RegisterNodesResponse)
UA_TYPE_BINARY_ENCODING(UA_RegisterNodesResponse)
UA_TYPE_XML_ENCODING(UA_RegisterNodesResponse)

/** @brief Unregisters one or more previously registered nodes. */
typedef struct UA_UnregisterNodesRequest {
	UA_RequestHeader requestHeader;
	UA_Int32 nodesToUnregisterSize;
	UA_NodeId* nodesToUnregister;
} UA_UnregisterNodesRequest;
UA_TYPE_PROTOTYPES(UA_UnregisterNodesRequest)
UA_TYPE_BINARY_ENCODING(UA_UnregisterNodesRequest)
UA_TYPE_XML_ENCODING(UA_UnregisterNodesRequest)

/** @brief Unregisters one or more previously registered nodes. */
typedef struct UA_UnregisterNodesResponse {
	UA_ResponseHeader responseHeader;
} UA_UnregisterNodesResponse;
UA_TYPE_PROTOTYPES(UA_UnregisterNodesResponse)
UA_TYPE_BINARY_ENCODING(UA_UnregisterNodesResponse)
UA_TYPE_XML_ENCODING(UA_UnregisterNodesResponse)

/** @brief A monotonically increasing value. */
typedef UA_ByteString UA_Counter;
UA_TYPE_PROTOTYPES(UA_Counter)
UA_TYPE_BINARY_ENCODING(UA_Counter)
UA_TYPE_XML_ENCODING(UA_Counter)

/** @brief Specifies a range of array indexes. */
typedef UA_ByteString UA_NumericRange;
UA_TYPE_PROTOTYPES(UA_NumericRange)
UA_TYPE_BINARY_ENCODING(UA_NumericRange)
UA_TYPE_XML_ENCODING(UA_NumericRange)

/** @brief A time value specified as HH:MM:SS.SSS. */
typedef UA_ByteString UA_Time;
UA_TYPE_PROTOTYPES(UA_Time)
UA_TYPE_BINARY_ENCODING(UA_Time)
UA_TYPE_XML_ENCODING(UA_Time)

/** @brief A date value. */
typedef UA_ByteString UA_Date;
UA_TYPE_PROTOTYPES(UA_Date)
UA_TYPE_BINARY_ENCODING(UA_Date)
UA_TYPE_XML_ENCODING(UA_Date)

typedef struct UA_EndpointConfiguration {
	UA_Int32 operationTimeout;
	UA_Boolean useBinaryEncoding;
	UA_Int32 maxStringLength;
	UA_Int32 maxByteStringLength;
	UA_Int32 maxArrayLength;
	UA_Int32 maxMessageSize;
	UA_Int32 maxBufferSize;
	UA_Int32 channelLifetime;
	UA_Int32 securityTokenLifetime;
} UA_EndpointConfiguration;
UA_TYPE_PROTOTYPES(UA_EndpointConfiguration)
UA_TYPE_BINARY_ENCODING(UA_EndpointConfiguration)
UA_TYPE_XML_ENCODING(UA_EndpointConfiguration)

typedef UA_UInt32 UA_ComplianceLevel;
enum UA_ComplianceLevel_enum { 
	UA_COMPLIANCELEVEL_UNTESTED = 0,
	UA_COMPLIANCELEVEL_PARTIAL = 1,
	UA_COMPLIANCELEVEL_SELFTESTED = 2,
	UA_COMPLIANCELEVEL_CERTIFIED = 3
};
UA_TYPE_PROTOTYPES (UA_ComplianceLevel)
UA_TYPE_BINARY_ENCODING(UA_ComplianceLevel)
UA_TYPE_XML_ENCODING(UA_ComplianceLevel)

typedef struct UA_SupportedProfile {
	UA_String organizationUri;
	UA_String profileId;
	UA_String complianceTool;
	UA_DateTime complianceDate;
	UA_ComplianceLevel complianceLevel;
	UA_Int32 unsupportedUnitIdsSize;
	UA_String* unsupportedUnitIds;
} UA_SupportedProfile;
UA_TYPE_PROTOTYPES(UA_SupportedProfile)
UA_TYPE_BINARY_ENCODING(UA_SupportedProfile)
UA_TYPE_XML_ENCODING(UA_SupportedProfile)

typedef struct UA_SoftwareCertificate {
	UA_String productName;
	UA_String productUri;
	UA_String vendorName;
	UA_ByteString vendorProductCertificate;
	UA_String softwareVersion;
	UA_String buildNumber;
	UA_DateTime buildDate;
	UA_String issuedBy;
	UA_DateTime issueDate;
	UA_Int32 supportedProfilesSize;
	UA_SupportedProfile* supportedProfiles;
} UA_SoftwareCertificate;
UA_TYPE_PROTOTYPES(UA_SoftwareCertificate)
UA_TYPE_BINARY_ENCODING(UA_SoftwareCertificate)
UA_TYPE_XML_ENCODING(UA_SoftwareCertificate)

typedef struct UA_QueryDataDescription {
	UA_RelativePath relativePath;
	UA_UInt32 attributeId;
	UA_String indexRange;
} UA_QueryDataDescription;
UA_TYPE_PROTOTYPES(UA_QueryDataDescription)
UA_TYPE_BINARY_ENCODING(UA_QueryDataDescription)
UA_TYPE_XML_ENCODING(UA_QueryDataDescription)

typedef struct UA_NodeTypeDescription {
	UA_ExpandedNodeId typeDefinitionNode;
	UA_Boolean includeSubTypes;
	UA_Int32 dataToReturnSize;
	UA_QueryDataDescription* dataToReturn;
} UA_NodeTypeDescription;
UA_TYPE_PROTOTYPES(UA_NodeTypeDescription)
UA_TYPE_BINARY_ENCODING(UA_NodeTypeDescription)
UA_TYPE_XML_ENCODING(UA_NodeTypeDescription)

typedef UA_UInt32 UA_FilterOperator;
enum UA_FilterOperator_enum { 
	UA_FILTEROPERATOR_EQUALS = 0,
	UA_FILTEROPERATOR_ISNULL = 1,
	UA_FILTEROPERATOR_GREATERTHAN = 2,
	UA_FILTEROPERATOR_LESSTHAN = 3,
	UA_FILTEROPERATOR_GREATERTHANOREQUAL = 4,
	UA_FILTEROPERATOR_LESSTHANOREQUAL = 5,
	UA_FILTEROPERATOR_LIKE = 6,
	UA_FILTEROPERATOR_NOT = 7,
	UA_FILTEROPERATOR_BETWEEN = 8,
	UA_FILTEROPERATOR_INLIST = 9,
	UA_FILTEROPERATOR_AND = 10,
	UA_FILTEROPERATOR_OR = 11,
	UA_FILTEROPERATOR_CAST = 12,
	UA_FILTEROPERATOR_INVIEW = 13,
	UA_FILTEROPERATOR_OFTYPE = 14,
	UA_FILTEROPERATOR_RELATEDTO = 15,
	UA_FILTEROPERATOR_BITWISEAND = 16,
	UA_FILTEROPERATOR_BITWISEOR = 17
};
UA_TYPE_PROTOTYPES (UA_FilterOperator)
UA_TYPE_BINARY_ENCODING(UA_FilterOperator)
UA_TYPE_XML_ENCODING(UA_FilterOperator)

typedef struct UA_QueryDataSet {
	UA_ExpandedNodeId nodeId;
	UA_ExpandedNodeId typeDefinitionNode;
	UA_Int32 valuesSize;
	UA_Variant* values;
} UA_QueryDataSet;
UA_TYPE_PROTOTYPES(UA_QueryDataSet)
UA_TYPE_BINARY_ENCODING(UA_QueryDataSet)
UA_TYPE_XML_ENCODING(UA_QueryDataSet)

typedef struct UA_NodeReference {
	UA_NodeId nodeId;
	UA_NodeId referenceTypeId;
	UA_Boolean isForward;
	UA_Int32 referencedNodeIdsSize;
	UA_NodeId* referencedNodeIds;
} UA_NodeReference;
UA_TYPE_PROTOTYPES(UA_NodeReference)
UA_TYPE_BINARY_ENCODING(UA_NodeReference)
UA_TYPE_XML_ENCODING(UA_NodeReference)

typedef struct UA_ContentFilterElement {
	UA_FilterOperator filterOperator;
	UA_Int32 filterOperandsSize;
	UA_ExtensionObject* filterOperands;
} UA_ContentFilterElement;
UA_TYPE_PROTOTYPES(UA_ContentFilterElement)
UA_TYPE_BINARY_ENCODING(UA_ContentFilterElement)
UA_TYPE_XML_ENCODING(UA_ContentFilterElement)

typedef struct UA_ContentFilter {
	UA_Int32 elementsSize;
	UA_ContentFilterElement* elements;
} UA_ContentFilter;
UA_TYPE_PROTOTYPES(UA_ContentFilter)
UA_TYPE_BINARY_ENCODING(UA_ContentFilter)
UA_TYPE_XML_ENCODING(UA_ContentFilter)

typedef void* UA_FilterOperand;
UA_TYPE_PROTOTYPES(UA_FilterOperand)
UA_TYPE_BINARY_ENCODING(UA_FilterOperand)
UA_TYPE_XML_ENCODING(UA_FilterOperand)

typedef struct UA_ElementOperand {
	UA_UInt32 index;
} UA_ElementOperand;
UA_TYPE_PROTOTYPES(UA_ElementOperand)
UA_TYPE_BINARY_ENCODING(UA_ElementOperand)
UA_TYPE_XML_ENCODING(UA_ElementOperand)

typedef struct UA_LiteralOperand {
	UA_Variant value;
} UA_LiteralOperand;
UA_TYPE_PROTOTYPES(UA_LiteralOperand)
UA_TYPE_BINARY_ENCODING(UA_LiteralOperand)
UA_TYPE_XML_ENCODING(UA_LiteralOperand)

typedef struct UA_AttributeOperand {
	UA_NodeId nodeId;
	UA_String alias;
	UA_RelativePath browsePath;
	UA_UInt32 attributeId;
	UA_String indexRange;
} UA_AttributeOperand;
UA_TYPE_PROTOTYPES(UA_AttributeOperand)
UA_TYPE_BINARY_ENCODING(UA_AttributeOperand)
UA_TYPE_XML_ENCODING(UA_AttributeOperand)

typedef struct UA_SimpleAttributeOperand {
	UA_NodeId typeDefinitionId;
	UA_Int32 browsePathSize;
	UA_QualifiedName* browsePath;
	UA_UInt32 attributeId;
	UA_String indexRange;
} UA_SimpleAttributeOperand;
UA_TYPE_PROTOTYPES(UA_SimpleAttributeOperand)
UA_TYPE_BINARY_ENCODING(UA_SimpleAttributeOperand)
UA_TYPE_XML_ENCODING(UA_SimpleAttributeOperand)

typedef struct UA_ContentFilterElementResult {
	UA_StatusCode statusCode;
	UA_Int32 operandStatusCodesSize;
	UA_StatusCode* operandStatusCodes;
	UA_Int32 operandDiagnosticInfosSize;
	UA_DiagnosticInfo* operandDiagnosticInfos;
} UA_ContentFilterElementResult;
UA_TYPE_PROTOTYPES(UA_ContentFilterElementResult)
UA_TYPE_BINARY_ENCODING(UA_ContentFilterElementResult)
UA_TYPE_XML_ENCODING(UA_ContentFilterElementResult)

typedef struct UA_ContentFilterResult {
	UA_Int32 elementResultsSize;
	UA_ContentFilterElementResult* elementResults;
	UA_Int32 elementDiagnosticInfosSize;
	UA_DiagnosticInfo* elementDiagnosticInfos;
} UA_ContentFilterResult;
UA_TYPE_PROTOTYPES(UA_ContentFilterResult)
UA_TYPE_BINARY_ENCODING(UA_ContentFilterResult)
UA_TYPE_XML_ENCODING(UA_ContentFilterResult)

typedef struct UA_ParsingResult {
	UA_StatusCode statusCode;
	UA_Int32 dataStatusCodesSize;
	UA_StatusCode* dataStatusCodes;
	UA_Int32 dataDiagnosticInfosSize;
	UA_DiagnosticInfo* dataDiagnosticInfos;
} UA_ParsingResult;
UA_TYPE_PROTOTYPES(UA_ParsingResult)
UA_TYPE_BINARY_ENCODING(UA_ParsingResult)
UA_TYPE_XML_ENCODING(UA_ParsingResult)

typedef struct UA_QueryFirstRequest {
	UA_RequestHeader requestHeader;
	UA_ViewDescription view;
	UA_Int32 nodeTypesSize;
	UA_NodeTypeDescription* nodeTypes;
	UA_ContentFilter filter;
	UA_UInt32 maxDataSetsToReturn;
	UA_UInt32 maxReferencesToReturn;
} UA_QueryFirstRequest;
UA_TYPE_PROTOTYPES(UA_QueryFirstRequest)
UA_TYPE_BINARY_ENCODING(UA_QueryFirstRequest)
UA_TYPE_XML_ENCODING(UA_QueryFirstRequest)

typedef struct UA_QueryFirstResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 queryDataSetsSize;
	UA_QueryDataSet* queryDataSets;
	UA_ByteString continuationPoint;
	UA_Int32 parsingResultsSize;
	UA_ParsingResult* parsingResults;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
	UA_ContentFilterResult filterResult;
} UA_QueryFirstResponse;
UA_TYPE_PROTOTYPES(UA_QueryFirstResponse)
UA_TYPE_BINARY_ENCODING(UA_QueryFirstResponse)
UA_TYPE_XML_ENCODING(UA_QueryFirstResponse)

typedef struct UA_QueryNextRequest {
	UA_RequestHeader requestHeader;
	UA_Boolean releaseContinuationPoint;
	UA_ByteString continuationPoint;
} UA_QueryNextRequest;
UA_TYPE_PROTOTYPES(UA_QueryNextRequest)
UA_TYPE_BINARY_ENCODING(UA_QueryNextRequest)
UA_TYPE_XML_ENCODING(UA_QueryNextRequest)

typedef struct UA_QueryNextResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 queryDataSetsSize;
	UA_QueryDataSet* queryDataSets;
	UA_ByteString revisedContinuationPoint;
} UA_QueryNextResponse;
UA_TYPE_PROTOTYPES(UA_QueryNextResponse)
UA_TYPE_BINARY_ENCODING(UA_QueryNextResponse)
UA_TYPE_XML_ENCODING(UA_QueryNextResponse)

typedef UA_UInt32 UA_TimestampsToReturn;
enum UA_TimestampsToReturn_enum { 
	UA_TIMESTAMPSTORETURN_SOURCE = 0,
	UA_TIMESTAMPSTORETURN_SERVER = 1,
	UA_TIMESTAMPSTORETURN_BOTH = 2,
	UA_TIMESTAMPSTORETURN_NEITHER = 3
};
UA_TYPE_PROTOTYPES (UA_TimestampsToReturn)
UA_TYPE_BINARY_ENCODING(UA_TimestampsToReturn)
UA_TYPE_XML_ENCODING(UA_TimestampsToReturn)

typedef struct UA_ReadValueId {
	UA_NodeId nodeId;
	UA_UInt32 attributeId;
	UA_String indexRange;
	UA_QualifiedName dataEncoding;
} UA_ReadValueId;
UA_TYPE_PROTOTYPES(UA_ReadValueId)
UA_TYPE_BINARY_ENCODING(UA_ReadValueId)
UA_TYPE_XML_ENCODING(UA_ReadValueId)

typedef struct UA_ReadRequest {
	UA_RequestHeader requestHeader;
	UA_Double maxAge;
	UA_TimestampsToReturn timestampsToReturn;
	UA_Int32 nodesToReadSize;
	UA_ReadValueId* nodesToRead;
} UA_ReadRequest;
UA_TYPE_PROTOTYPES(UA_ReadRequest)
UA_TYPE_BINARY_ENCODING(UA_ReadRequest)
UA_TYPE_XML_ENCODING(UA_ReadRequest)

typedef struct UA_ReadResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_DataValue* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_ReadResponse;
UA_TYPE_PROTOTYPES(UA_ReadResponse)
UA_TYPE_BINARY_ENCODING(UA_ReadResponse)
UA_TYPE_XML_ENCODING(UA_ReadResponse)

typedef struct UA_HistoryReadValueId {
	UA_NodeId nodeId;
	UA_String indexRange;
	UA_QualifiedName dataEncoding;
	UA_ByteString continuationPoint;
} UA_HistoryReadValueId;
UA_TYPE_PROTOTYPES(UA_HistoryReadValueId)
UA_TYPE_BINARY_ENCODING(UA_HistoryReadValueId)
UA_TYPE_XML_ENCODING(UA_HistoryReadValueId)

typedef struct UA_HistoryReadResult {
	UA_StatusCode statusCode;
	UA_ByteString continuationPoint;
	UA_ExtensionObject historyData;
} UA_HistoryReadResult;
UA_TYPE_PROTOTYPES(UA_HistoryReadResult)
UA_TYPE_BINARY_ENCODING(UA_HistoryReadResult)
UA_TYPE_XML_ENCODING(UA_HistoryReadResult)

typedef void* UA_HistoryReadDetails;
UA_TYPE_PROTOTYPES(UA_HistoryReadDetails)
UA_TYPE_BINARY_ENCODING(UA_HistoryReadDetails)
UA_TYPE_XML_ENCODING(UA_HistoryReadDetails)

typedef struct UA_ReadRawModifiedDetails {
	UA_Boolean isReadModified;
	UA_DateTime startTime;
	UA_DateTime endTime;
	UA_UInt32 numValuesPerNode;
	UA_Boolean returnBounds;
} UA_ReadRawModifiedDetails;
UA_TYPE_PROTOTYPES(UA_ReadRawModifiedDetails)
UA_TYPE_BINARY_ENCODING(UA_ReadRawModifiedDetails)
UA_TYPE_XML_ENCODING(UA_ReadRawModifiedDetails)

typedef struct UA_ReadAtTimeDetails {
	UA_Int32 reqTimesSize;
	UA_DateTime* reqTimes;
	UA_Boolean useSimpleBounds;
} UA_ReadAtTimeDetails;
UA_TYPE_PROTOTYPES(UA_ReadAtTimeDetails)
UA_TYPE_BINARY_ENCODING(UA_ReadAtTimeDetails)
UA_TYPE_XML_ENCODING(UA_ReadAtTimeDetails)

typedef struct UA_HistoryData {
	UA_Int32 dataValuesSize;
	UA_DataValue* dataValues;
} UA_HistoryData;
UA_TYPE_PROTOTYPES(UA_HistoryData)
UA_TYPE_BINARY_ENCODING(UA_HistoryData)
UA_TYPE_XML_ENCODING(UA_HistoryData)

typedef struct UA_HistoryReadRequest {
	UA_RequestHeader requestHeader;
	UA_ExtensionObject historyReadDetails;
	UA_TimestampsToReturn timestampsToReturn;
	UA_Boolean releaseContinuationPoints;
	UA_Int32 nodesToReadSize;
	UA_HistoryReadValueId* nodesToRead;
} UA_HistoryReadRequest;
UA_TYPE_PROTOTYPES(UA_HistoryReadRequest)
UA_TYPE_BINARY_ENCODING(UA_HistoryReadRequest)
UA_TYPE_XML_ENCODING(UA_HistoryReadRequest)

typedef struct UA_HistoryReadResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_HistoryReadResult* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_HistoryReadResponse;
UA_TYPE_PROTOTYPES(UA_HistoryReadResponse)
UA_TYPE_BINARY_ENCODING(UA_HistoryReadResponse)
UA_TYPE_XML_ENCODING(UA_HistoryReadResponse)

typedef struct UA_WriteValue {
	UA_NodeId nodeId;
	UA_UInt32 attributeId;
	UA_String indexRange;
	UA_DataValue value;
} UA_WriteValue;
UA_TYPE_PROTOTYPES(UA_WriteValue)
UA_TYPE_BINARY_ENCODING(UA_WriteValue)
UA_TYPE_XML_ENCODING(UA_WriteValue)

typedef struct UA_WriteRequest {
	UA_RequestHeader requestHeader;
	UA_Int32 nodesToWriteSize;
	UA_WriteValue* nodesToWrite;
} UA_WriteRequest;
UA_TYPE_PROTOTYPES(UA_WriteRequest)
UA_TYPE_BINARY_ENCODING(UA_WriteRequest)
UA_TYPE_XML_ENCODING(UA_WriteRequest)

typedef struct UA_WriteResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_StatusCode* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_WriteResponse;
UA_TYPE_PROTOTYPES(UA_WriteResponse)
UA_TYPE_BINARY_ENCODING(UA_WriteResponse)
UA_TYPE_XML_ENCODING(UA_WriteResponse)

typedef struct UA_HistoryUpdateDetails {
	UA_NodeId nodeId;
} UA_HistoryUpdateDetails;
UA_TYPE_PROTOTYPES(UA_HistoryUpdateDetails)
UA_TYPE_BINARY_ENCODING(UA_HistoryUpdateDetails)
UA_TYPE_XML_ENCODING(UA_HistoryUpdateDetails)

typedef UA_UInt32 UA_HistoryUpdateType;
enum UA_HistoryUpdateType_enum { 
	UA_HISTORYUPDATETYPE_INSERT = 1,
	UA_HISTORYUPDATETYPE_REPLACE = 2,
	UA_HISTORYUPDATETYPE_UPDATE = 3,
	UA_HISTORYUPDATETYPE_DELETE = 4
};
UA_TYPE_PROTOTYPES (UA_HistoryUpdateType)
UA_TYPE_BINARY_ENCODING(UA_HistoryUpdateType)
UA_TYPE_XML_ENCODING(UA_HistoryUpdateType)

typedef UA_UInt32 UA_PerformUpdateType;
enum UA_PerformUpdateType_enum { 
	UA_PERFORMUPDATETYPE_INSERT = 1,
	UA_PERFORMUPDATETYPE_REPLACE = 2,
	UA_PERFORMUPDATETYPE_UPDATE = 3,
	UA_PERFORMUPDATETYPE_REMOVE = 4
};
UA_TYPE_PROTOTYPES (UA_PerformUpdateType)
UA_TYPE_BINARY_ENCODING(UA_PerformUpdateType)
UA_TYPE_XML_ENCODING(UA_PerformUpdateType)

typedef struct UA_UpdateDataDetails {
	UA_NodeId nodeId;
	UA_PerformUpdateType performInsertReplace;
	UA_Int32 updateValuesSize;
	UA_DataValue* updateValues;
} UA_UpdateDataDetails;
UA_TYPE_PROTOTYPES(UA_UpdateDataDetails)
UA_TYPE_BINARY_ENCODING(UA_UpdateDataDetails)
UA_TYPE_XML_ENCODING(UA_UpdateDataDetails)

typedef struct UA_UpdateStructureDataDetails {
	UA_NodeId nodeId;
	UA_PerformUpdateType performInsertReplace;
	UA_Int32 updateValuesSize;
	UA_DataValue* updateValues;
} UA_UpdateStructureDataDetails;
UA_TYPE_PROTOTYPES(UA_UpdateStructureDataDetails)
UA_TYPE_BINARY_ENCODING(UA_UpdateStructureDataDetails)
UA_TYPE_XML_ENCODING(UA_UpdateStructureDataDetails)

typedef struct UA_DeleteRawModifiedDetails {
	UA_NodeId nodeId;
	UA_Boolean isDeleteModified;
	UA_DateTime startTime;
	UA_DateTime endTime;
} UA_DeleteRawModifiedDetails;
UA_TYPE_PROTOTYPES(UA_DeleteRawModifiedDetails)
UA_TYPE_BINARY_ENCODING(UA_DeleteRawModifiedDetails)
UA_TYPE_XML_ENCODING(UA_DeleteRawModifiedDetails)

typedef struct UA_DeleteAtTimeDetails {
	UA_NodeId nodeId;
	UA_Int32 reqTimesSize;
	UA_DateTime* reqTimes;
} UA_DeleteAtTimeDetails;
UA_TYPE_PROTOTYPES(UA_DeleteAtTimeDetails)
UA_TYPE_BINARY_ENCODING(UA_DeleteAtTimeDetails)
UA_TYPE_XML_ENCODING(UA_DeleteAtTimeDetails)

typedef struct UA_DeleteEventDetails {
	UA_NodeId nodeId;
	UA_Int32 eventIdsSize;
	UA_ByteString* eventIds;
} UA_DeleteEventDetails;
UA_TYPE_PROTOTYPES(UA_DeleteEventDetails)
UA_TYPE_BINARY_ENCODING(UA_DeleteEventDetails)
UA_TYPE_XML_ENCODING(UA_DeleteEventDetails)

typedef struct UA_HistoryUpdateResult {
	UA_StatusCode statusCode;
	UA_Int32 operationResultsSize;
	UA_StatusCode* operationResults;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_HistoryUpdateResult;
UA_TYPE_PROTOTYPES(UA_HistoryUpdateResult)
UA_TYPE_BINARY_ENCODING(UA_HistoryUpdateResult)
UA_TYPE_XML_ENCODING(UA_HistoryUpdateResult)

typedef struct UA_HistoryUpdateRequest {
	UA_RequestHeader requestHeader;
	UA_Int32 historyUpdateDetailsSize;
	UA_ExtensionObject* historyUpdateDetails;
} UA_HistoryUpdateRequest;
UA_TYPE_PROTOTYPES(UA_HistoryUpdateRequest)
UA_TYPE_BINARY_ENCODING(UA_HistoryUpdateRequest)
UA_TYPE_XML_ENCODING(UA_HistoryUpdateRequest)

typedef struct UA_HistoryUpdateResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_HistoryUpdateResult* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_HistoryUpdateResponse;
UA_TYPE_PROTOTYPES(UA_HistoryUpdateResponse)
UA_TYPE_BINARY_ENCODING(UA_HistoryUpdateResponse)
UA_TYPE_XML_ENCODING(UA_HistoryUpdateResponse)

typedef struct UA_CallMethodRequest {
	UA_NodeId objectId;
	UA_NodeId methodId;
	UA_Int32 inputArgumentsSize;
	UA_Variant* inputArguments;
} UA_CallMethodRequest;
UA_TYPE_PROTOTYPES(UA_CallMethodRequest)
UA_TYPE_BINARY_ENCODING(UA_CallMethodRequest)
UA_TYPE_XML_ENCODING(UA_CallMethodRequest)

typedef struct UA_CallMethodResult {
	UA_StatusCode statusCode;
	UA_Int32 inputArgumentResultsSize;
	UA_StatusCode* inputArgumentResults;
	UA_Int32 inputArgumentDiagnosticInfosSize;
	UA_DiagnosticInfo* inputArgumentDiagnosticInfos;
	UA_Int32 outputArgumentsSize;
	UA_Variant* outputArguments;
} UA_CallMethodResult;
UA_TYPE_PROTOTYPES(UA_CallMethodResult)
UA_TYPE_BINARY_ENCODING(UA_CallMethodResult)
UA_TYPE_XML_ENCODING(UA_CallMethodResult)

typedef struct UA_CallRequest {
	UA_RequestHeader requestHeader;
	UA_Int32 methodsToCallSize;
	UA_CallMethodRequest* methodsToCall;
} UA_CallRequest;
UA_TYPE_PROTOTYPES(UA_CallRequest)
UA_TYPE_BINARY_ENCODING(UA_CallRequest)
UA_TYPE_XML_ENCODING(UA_CallRequest)

typedef struct UA_CallResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_CallMethodResult* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_CallResponse;
UA_TYPE_PROTOTYPES(UA_CallResponse)
UA_TYPE_BINARY_ENCODING(UA_CallResponse)
UA_TYPE_XML_ENCODING(UA_CallResponse)

typedef UA_UInt32 UA_MonitoringMode;
enum UA_MonitoringMode_enum { 
	UA_MONITORINGMODE_DISABLED = 0,
	UA_MONITORINGMODE_SAMPLING = 1,
	UA_MONITORINGMODE_REPORTING = 2
};
UA_TYPE_PROTOTYPES (UA_MonitoringMode)
UA_TYPE_BINARY_ENCODING(UA_MonitoringMode)
UA_TYPE_XML_ENCODING(UA_MonitoringMode)

typedef UA_UInt32 UA_DataChangeTrigger;
enum UA_DataChangeTrigger_enum { 
	UA_DATACHANGETRIGGER_STATUS = 0,
	UA_DATACHANGETRIGGER_STATUSVALUE = 1,
	UA_DATACHANGETRIGGER_STATUSVALUETIMESTAMP = 2
};
UA_TYPE_PROTOTYPES (UA_DataChangeTrigger)
UA_TYPE_BINARY_ENCODING(UA_DataChangeTrigger)
UA_TYPE_XML_ENCODING(UA_DataChangeTrigger)

typedef UA_UInt32 UA_DeadbandType;
enum UA_DeadbandType_enum { 
	UA_DEADBANDTYPE_NONE = 0,
	UA_DEADBANDTYPE_ABSOLUTE = 1,
	UA_DEADBANDTYPE_PERCENT = 2
};
UA_TYPE_PROTOTYPES (UA_DeadbandType)
UA_TYPE_BINARY_ENCODING(UA_DeadbandType)
UA_TYPE_XML_ENCODING(UA_DeadbandType)

typedef void* UA_MonitoringFilter;
UA_TYPE_PROTOTYPES(UA_MonitoringFilter)
UA_TYPE_BINARY_ENCODING(UA_MonitoringFilter)
UA_TYPE_XML_ENCODING(UA_MonitoringFilter)

typedef struct UA_DataChangeFilter {
	UA_DataChangeTrigger trigger;
	UA_UInt32 deadbandType;
	UA_Double deadbandValue;
} UA_DataChangeFilter;
UA_TYPE_PROTOTYPES(UA_DataChangeFilter)
UA_TYPE_BINARY_ENCODING(UA_DataChangeFilter)
UA_TYPE_XML_ENCODING(UA_DataChangeFilter)

typedef struct UA_EventFilter {
	UA_Int32 selectClausesSize;
	UA_SimpleAttributeOperand* selectClauses;
	UA_ContentFilter whereClause;
} UA_EventFilter;
UA_TYPE_PROTOTYPES(UA_EventFilter)
UA_TYPE_BINARY_ENCODING(UA_EventFilter)
UA_TYPE_XML_ENCODING(UA_EventFilter)

typedef struct UA_AggregateConfiguration {
	UA_Boolean useServerCapabilitiesDefaults;
	UA_Boolean treatUncertainAsBad;
	UA_Byte percentDataBad;
	UA_Byte percentDataGood;
	UA_Boolean useSlopedExtrapolation;
} UA_AggregateConfiguration;
UA_TYPE_PROTOTYPES(UA_AggregateConfiguration)
UA_TYPE_BINARY_ENCODING(UA_AggregateConfiguration)
UA_TYPE_XML_ENCODING(UA_AggregateConfiguration)

typedef struct UA_AggregateFilter {
	UA_DateTime startTime;
	UA_NodeId aggregateType;
	UA_Double processingInterval;
	UA_AggregateConfiguration aggregateConfiguration;
} UA_AggregateFilter;
UA_TYPE_PROTOTYPES(UA_AggregateFilter)
UA_TYPE_BINARY_ENCODING(UA_AggregateFilter)
UA_TYPE_XML_ENCODING(UA_AggregateFilter)

typedef void* UA_MonitoringFilterResult;
UA_TYPE_PROTOTYPES(UA_MonitoringFilterResult)
UA_TYPE_BINARY_ENCODING(UA_MonitoringFilterResult)
UA_TYPE_XML_ENCODING(UA_MonitoringFilterResult)

typedef struct UA_EventFilterResult {
	UA_Int32 selectClauseResultsSize;
	UA_StatusCode* selectClauseResults;
	UA_Int32 selectClauseDiagnosticInfosSize;
	UA_DiagnosticInfo* selectClauseDiagnosticInfos;
	UA_ContentFilterResult whereClauseResult;
} UA_EventFilterResult;
UA_TYPE_PROTOTYPES(UA_EventFilterResult)
UA_TYPE_BINARY_ENCODING(UA_EventFilterResult)
UA_TYPE_XML_ENCODING(UA_EventFilterResult)

typedef struct UA_AggregateFilterResult {
	UA_DateTime revisedStartTime;
	UA_Double revisedProcessingInterval;
	UA_AggregateConfiguration revisedAggregateConfiguration;
} UA_AggregateFilterResult;
UA_TYPE_PROTOTYPES(UA_AggregateFilterResult)
UA_TYPE_BINARY_ENCODING(UA_AggregateFilterResult)
UA_TYPE_XML_ENCODING(UA_AggregateFilterResult)

typedef struct UA_MonitoringParameters {
	UA_UInt32 clientHandle;
	UA_Double samplingInterval;
	UA_ExtensionObject filter;
	UA_UInt32 queueSize;
	UA_Boolean discardOldest;
} UA_MonitoringParameters;
UA_TYPE_PROTOTYPES(UA_MonitoringParameters)
UA_TYPE_BINARY_ENCODING(UA_MonitoringParameters)
UA_TYPE_XML_ENCODING(UA_MonitoringParameters)

typedef struct UA_MonitoredItemCreateRequest {
	UA_ReadValueId itemToMonitor;
	UA_MonitoringMode monitoringMode;
	UA_MonitoringParameters requestedParameters;
} UA_MonitoredItemCreateRequest;
UA_TYPE_PROTOTYPES(UA_MonitoredItemCreateRequest)
UA_TYPE_BINARY_ENCODING(UA_MonitoredItemCreateRequest)
UA_TYPE_XML_ENCODING(UA_MonitoredItemCreateRequest)

typedef struct UA_MonitoredItemCreateResult {
	UA_StatusCode statusCode;
	UA_UInt32 monitoredItemId;
	UA_Double revisedSamplingInterval;
	UA_UInt32 revisedQueueSize;
	UA_ExtensionObject filterResult;
} UA_MonitoredItemCreateResult;
UA_TYPE_PROTOTYPES(UA_MonitoredItemCreateResult)
UA_TYPE_BINARY_ENCODING(UA_MonitoredItemCreateResult)
UA_TYPE_XML_ENCODING(UA_MonitoredItemCreateResult)

typedef struct UA_CreateMonitoredItemsRequest {
	UA_RequestHeader requestHeader;
	UA_UInt32 subscriptionId;
	UA_TimestampsToReturn timestampsToReturn;
	UA_Int32 itemsToCreateSize;
	UA_MonitoredItemCreateRequest* itemsToCreate;
} UA_CreateMonitoredItemsRequest;
UA_TYPE_PROTOTYPES(UA_CreateMonitoredItemsRequest)
UA_TYPE_BINARY_ENCODING(UA_CreateMonitoredItemsRequest)
UA_TYPE_XML_ENCODING(UA_CreateMonitoredItemsRequest)

typedef struct UA_CreateMonitoredItemsResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_MonitoredItemCreateResult* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_CreateMonitoredItemsResponse;
UA_TYPE_PROTOTYPES(UA_CreateMonitoredItemsResponse)
UA_TYPE_BINARY_ENCODING(UA_CreateMonitoredItemsResponse)
UA_TYPE_XML_ENCODING(UA_CreateMonitoredItemsResponse)

typedef struct UA_MonitoredItemModifyRequest {
	UA_UInt32 monitoredItemId;
	UA_MonitoringParameters requestedParameters;
} UA_MonitoredItemModifyRequest;
UA_TYPE_PROTOTYPES(UA_MonitoredItemModifyRequest)
UA_TYPE_BINARY_ENCODING(UA_MonitoredItemModifyRequest)
UA_TYPE_XML_ENCODING(UA_MonitoredItemModifyRequest)

typedef struct UA_MonitoredItemModifyResult {
	UA_StatusCode statusCode;
	UA_Double revisedSamplingInterval;
	UA_UInt32 revisedQueueSize;
	UA_ExtensionObject filterResult;
} UA_MonitoredItemModifyResult;
UA_TYPE_PROTOTYPES(UA_MonitoredItemModifyResult)
UA_TYPE_BINARY_ENCODING(UA_MonitoredItemModifyResult)
UA_TYPE_XML_ENCODING(UA_MonitoredItemModifyResult)

typedef struct UA_ModifyMonitoredItemsRequest {
	UA_RequestHeader requestHeader;
	UA_UInt32 subscriptionId;
	UA_TimestampsToReturn timestampsToReturn;
	UA_Int32 itemsToModifySize;
	UA_MonitoredItemModifyRequest* itemsToModify;
} UA_ModifyMonitoredItemsRequest;
UA_TYPE_PROTOTYPES(UA_ModifyMonitoredItemsRequest)
UA_TYPE_BINARY_ENCODING(UA_ModifyMonitoredItemsRequest)
UA_TYPE_XML_ENCODING(UA_ModifyMonitoredItemsRequest)

typedef struct UA_ModifyMonitoredItemsResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_MonitoredItemModifyResult* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_ModifyMonitoredItemsResponse;
UA_TYPE_PROTOTYPES(UA_ModifyMonitoredItemsResponse)
UA_TYPE_BINARY_ENCODING(UA_ModifyMonitoredItemsResponse)
UA_TYPE_XML_ENCODING(UA_ModifyMonitoredItemsResponse)

typedef struct UA_SetMonitoringModeRequest {
	UA_RequestHeader requestHeader;
	UA_UInt32 subscriptionId;
	UA_MonitoringMode monitoringMode;
	UA_Int32 monitoredItemIdsSize;
	UA_UInt32* monitoredItemIds;
} UA_SetMonitoringModeRequest;
UA_TYPE_PROTOTYPES(UA_SetMonitoringModeRequest)
UA_TYPE_BINARY_ENCODING(UA_SetMonitoringModeRequest)
UA_TYPE_XML_ENCODING(UA_SetMonitoringModeRequest)

typedef struct UA_SetMonitoringModeResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_StatusCode* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_SetMonitoringModeResponse;
UA_TYPE_PROTOTYPES(UA_SetMonitoringModeResponse)
UA_TYPE_BINARY_ENCODING(UA_SetMonitoringModeResponse)
UA_TYPE_XML_ENCODING(UA_SetMonitoringModeResponse)

typedef struct UA_SetTriggeringRequest {
	UA_RequestHeader requestHeader;
	UA_UInt32 subscriptionId;
	UA_UInt32 triggeringItemId;
	UA_Int32 linksToAddSize;
	UA_UInt32* linksToAdd;
	UA_Int32 linksToRemoveSize;
	UA_UInt32* linksToRemove;
} UA_SetTriggeringRequest;
UA_TYPE_PROTOTYPES(UA_SetTriggeringRequest)
UA_TYPE_BINARY_ENCODING(UA_SetTriggeringRequest)
UA_TYPE_XML_ENCODING(UA_SetTriggeringRequest)

typedef struct UA_SetTriggeringResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 addResultsSize;
	UA_StatusCode* addResults;
	UA_Int32 addDiagnosticInfosSize;
	UA_DiagnosticInfo* addDiagnosticInfos;
	UA_Int32 removeResultsSize;
	UA_StatusCode* removeResults;
	UA_Int32 removeDiagnosticInfosSize;
	UA_DiagnosticInfo* removeDiagnosticInfos;
} UA_SetTriggeringResponse;
UA_TYPE_PROTOTYPES(UA_SetTriggeringResponse)
UA_TYPE_BINARY_ENCODING(UA_SetTriggeringResponse)
UA_TYPE_XML_ENCODING(UA_SetTriggeringResponse)

typedef struct UA_DeleteMonitoredItemsRequest {
	UA_RequestHeader requestHeader;
	UA_UInt32 subscriptionId;
	UA_Int32 monitoredItemIdsSize;
	UA_UInt32* monitoredItemIds;
} UA_DeleteMonitoredItemsRequest;
UA_TYPE_PROTOTYPES(UA_DeleteMonitoredItemsRequest)
UA_TYPE_BINARY_ENCODING(UA_DeleteMonitoredItemsRequest)
UA_TYPE_XML_ENCODING(UA_DeleteMonitoredItemsRequest)

typedef struct UA_DeleteMonitoredItemsResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_StatusCode* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_DeleteMonitoredItemsResponse;
UA_TYPE_PROTOTYPES(UA_DeleteMonitoredItemsResponse)
UA_TYPE_BINARY_ENCODING(UA_DeleteMonitoredItemsResponse)
UA_TYPE_XML_ENCODING(UA_DeleteMonitoredItemsResponse)

typedef struct UA_CreateSubscriptionRequest {
	UA_RequestHeader requestHeader;
	UA_Double requestedPublishingInterval;
	UA_UInt32 requestedLifetimeCount;
	UA_UInt32 requestedMaxKeepAliveCount;
	UA_UInt32 maxNotificationsPerPublish;
	UA_Boolean publishingEnabled;
	UA_Byte priority;
} UA_CreateSubscriptionRequest;
UA_TYPE_PROTOTYPES(UA_CreateSubscriptionRequest)
UA_TYPE_BINARY_ENCODING(UA_CreateSubscriptionRequest)
UA_TYPE_XML_ENCODING(UA_CreateSubscriptionRequest)

typedef struct UA_CreateSubscriptionResponse {
	UA_ResponseHeader responseHeader;
	UA_UInt32 subscriptionId;
	UA_Double revisedPublishingInterval;
	UA_UInt32 revisedLifetimeCount;
	UA_UInt32 revisedMaxKeepAliveCount;
} UA_CreateSubscriptionResponse;
UA_TYPE_PROTOTYPES(UA_CreateSubscriptionResponse)
UA_TYPE_BINARY_ENCODING(UA_CreateSubscriptionResponse)
UA_TYPE_XML_ENCODING(UA_CreateSubscriptionResponse)

typedef struct UA_ModifySubscriptionRequest {
	UA_RequestHeader requestHeader;
	UA_UInt32 subscriptionId;
	UA_Double requestedPublishingInterval;
	UA_UInt32 requestedLifetimeCount;
	UA_UInt32 requestedMaxKeepAliveCount;
	UA_UInt32 maxNotificationsPerPublish;
	UA_Byte priority;
} UA_ModifySubscriptionRequest;
UA_TYPE_PROTOTYPES(UA_ModifySubscriptionRequest)
UA_TYPE_BINARY_ENCODING(UA_ModifySubscriptionRequest)
UA_TYPE_XML_ENCODING(UA_ModifySubscriptionRequest)

typedef struct UA_ModifySubscriptionResponse {
	UA_ResponseHeader responseHeader;
	UA_Double revisedPublishingInterval;
	UA_UInt32 revisedLifetimeCount;
	UA_UInt32 revisedMaxKeepAliveCount;
} UA_ModifySubscriptionResponse;
UA_TYPE_PROTOTYPES(UA_ModifySubscriptionResponse)
UA_TYPE_BINARY_ENCODING(UA_ModifySubscriptionResponse)
UA_TYPE_XML_ENCODING(UA_ModifySubscriptionResponse)

typedef struct UA_SetPublishingModeRequest {
	UA_RequestHeader requestHeader;
	UA_Boolean publishingEnabled;
	UA_Int32 subscriptionIdsSize;
	UA_UInt32* subscriptionIds;
} UA_SetPublishingModeRequest;
UA_TYPE_PROTOTYPES(UA_SetPublishingModeRequest)
UA_TYPE_BINARY_ENCODING(UA_SetPublishingModeRequest)
UA_TYPE_XML_ENCODING(UA_SetPublishingModeRequest)

typedef struct UA_SetPublishingModeResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_StatusCode* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_SetPublishingModeResponse;
UA_TYPE_PROTOTYPES(UA_SetPublishingModeResponse)
UA_TYPE_BINARY_ENCODING(UA_SetPublishingModeResponse)
UA_TYPE_XML_ENCODING(UA_SetPublishingModeResponse)

typedef struct UA_NotificationMessage {
	UA_UInt32 sequenceNumber;
	UA_DateTime publishTime;
	UA_Int32 notificationDataSize;
	UA_ExtensionObject* notificationData;
} UA_NotificationMessage;
UA_TYPE_PROTOTYPES(UA_NotificationMessage)
UA_TYPE_BINARY_ENCODING(UA_NotificationMessage)
UA_TYPE_XML_ENCODING(UA_NotificationMessage)

typedef void* UA_NotificationData;
UA_TYPE_PROTOTYPES(UA_NotificationData)
UA_TYPE_BINARY_ENCODING(UA_NotificationData)
UA_TYPE_XML_ENCODING(UA_NotificationData)

typedef struct UA_MonitoredItemNotification {
	UA_UInt32 clientHandle;
	UA_DataValue value;
} UA_MonitoredItemNotification;
UA_TYPE_PROTOTYPES(UA_MonitoredItemNotification)
UA_TYPE_BINARY_ENCODING(UA_MonitoredItemNotification)
UA_TYPE_XML_ENCODING(UA_MonitoredItemNotification)

typedef struct UA_EventFieldList {
	UA_UInt32 clientHandle;
	UA_Int32 eventFieldsSize;
	UA_Variant* eventFields;
} UA_EventFieldList;
UA_TYPE_PROTOTYPES(UA_EventFieldList)
UA_TYPE_BINARY_ENCODING(UA_EventFieldList)
UA_TYPE_XML_ENCODING(UA_EventFieldList)

typedef struct UA_HistoryEventFieldList {
	UA_Int32 eventFieldsSize;
	UA_Variant* eventFields;
} UA_HistoryEventFieldList;
UA_TYPE_PROTOTYPES(UA_HistoryEventFieldList)
UA_TYPE_BINARY_ENCODING(UA_HistoryEventFieldList)
UA_TYPE_XML_ENCODING(UA_HistoryEventFieldList)

typedef struct UA_StatusChangeNotification {
	UA_StatusCode status;
	UA_DiagnosticInfo diagnosticInfo;
} UA_StatusChangeNotification;
UA_TYPE_PROTOTYPES(UA_StatusChangeNotification)
UA_TYPE_BINARY_ENCODING(UA_StatusChangeNotification)
UA_TYPE_XML_ENCODING(UA_StatusChangeNotification)

typedef struct UA_SubscriptionAcknowledgement {
	UA_UInt32 subscriptionId;
	UA_UInt32 sequenceNumber;
} UA_SubscriptionAcknowledgement;
UA_TYPE_PROTOTYPES(UA_SubscriptionAcknowledgement)
UA_TYPE_BINARY_ENCODING(UA_SubscriptionAcknowledgement)
UA_TYPE_XML_ENCODING(UA_SubscriptionAcknowledgement)

typedef struct UA_PublishRequest {
	UA_RequestHeader requestHeader;
	UA_Int32 subscriptionAcknowledgementsSize;
	UA_SubscriptionAcknowledgement* subscriptionAcknowledgements;
} UA_PublishRequest;
UA_TYPE_PROTOTYPES(UA_PublishRequest)
UA_TYPE_BINARY_ENCODING(UA_PublishRequest)
UA_TYPE_XML_ENCODING(UA_PublishRequest)

typedef struct UA_PublishResponse {
	UA_ResponseHeader responseHeader;
	UA_UInt32 subscriptionId;
	UA_Int32 availableSequenceNumbersSize;
	UA_UInt32* availableSequenceNumbers;
	UA_Boolean moreNotifications;
	UA_NotificationMessage notificationMessage;
	UA_Int32 resultsSize;
	UA_StatusCode* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_PublishResponse;
UA_TYPE_PROTOTYPES(UA_PublishResponse)
UA_TYPE_BINARY_ENCODING(UA_PublishResponse)
UA_TYPE_XML_ENCODING(UA_PublishResponse)

typedef struct UA_RepublishRequest {
	UA_RequestHeader requestHeader;
	UA_UInt32 subscriptionId;
	UA_UInt32 retransmitSequenceNumber;
} UA_RepublishRequest;
UA_TYPE_PROTOTYPES(UA_RepublishRequest)
UA_TYPE_BINARY_ENCODING(UA_RepublishRequest)
UA_TYPE_XML_ENCODING(UA_RepublishRequest)

typedef struct UA_RepublishResponse {
	UA_ResponseHeader responseHeader;
	UA_NotificationMessage notificationMessage;
} UA_RepublishResponse;
UA_TYPE_PROTOTYPES(UA_RepublishResponse)
UA_TYPE_BINARY_ENCODING(UA_RepublishResponse)
UA_TYPE_XML_ENCODING(UA_RepublishResponse)

typedef struct UA_TransferResult {
	UA_StatusCode statusCode;
	UA_Int32 availableSequenceNumbersSize;
	UA_UInt32* availableSequenceNumbers;
} UA_TransferResult;
UA_TYPE_PROTOTYPES(UA_TransferResult)
UA_TYPE_BINARY_ENCODING(UA_TransferResult)
UA_TYPE_XML_ENCODING(UA_TransferResult)

typedef struct UA_TransferSubscriptionsRequest {
	UA_RequestHeader requestHeader;
	UA_Int32 subscriptionIdsSize;
	UA_UInt32* subscriptionIds;
	UA_Boolean sendInitialValues;
} UA_TransferSubscriptionsRequest;
UA_TYPE_PROTOTYPES(UA_TransferSubscriptionsRequest)
UA_TYPE_BINARY_ENCODING(UA_TransferSubscriptionsRequest)
UA_TYPE_XML_ENCODING(UA_TransferSubscriptionsRequest)

typedef struct UA_TransferSubscriptionsResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_TransferResult* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_TransferSubscriptionsResponse;
UA_TYPE_PROTOTYPES(UA_TransferSubscriptionsResponse)
UA_TYPE_BINARY_ENCODING(UA_TransferSubscriptionsResponse)
UA_TYPE_XML_ENCODING(UA_TransferSubscriptionsResponse)

typedef struct UA_DeleteSubscriptionsRequest {
	UA_RequestHeader requestHeader;
	UA_Int32 subscriptionIdsSize;
	UA_UInt32* subscriptionIds;
} UA_DeleteSubscriptionsRequest;
UA_TYPE_PROTOTYPES(UA_DeleteSubscriptionsRequest)
UA_TYPE_BINARY_ENCODING(UA_DeleteSubscriptionsRequest)
UA_TYPE_XML_ENCODING(UA_DeleteSubscriptionsRequest)

typedef struct UA_DeleteSubscriptionsResponse {
	UA_ResponseHeader responseHeader;
	UA_Int32 resultsSize;
	UA_StatusCode* results;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_DeleteSubscriptionsResponse;
UA_TYPE_PROTOTYPES(UA_DeleteSubscriptionsResponse)
UA_TYPE_BINARY_ENCODING(UA_DeleteSubscriptionsResponse)
UA_TYPE_XML_ENCODING(UA_DeleteSubscriptionsResponse)

/** @brief A simple enumerated type used for testing. */
typedef UA_UInt32 UA_EnumeratedTestType;
enum UA_EnumeratedTestType_enum { 
	UA_ENUMERATEDTESTTYPE_RED = 1,
	UA_ENUMERATEDTESTTYPE_YELLOW = 4,
	UA_ENUMERATEDTESTTYPE_GREEN = 5
};
UA_TYPE_PROTOTYPES (UA_EnumeratedTestType)
UA_TYPE_BINARY_ENCODING(UA_EnumeratedTestType)
UA_TYPE_XML_ENCODING(UA_EnumeratedTestType)

/** @brief A complex type containing all possible scalar types used for testing. */
typedef struct UA_ScalarTestType {
	UA_Boolean boolean;
	UA_SByte sByte;
	UA_Byte byte;
	UA_Int16 int16;
	UA_UInt16 uInt16;
	UA_Int32 int32;
	UA_UInt32 uInt32;
	UA_Int64 int64;
	UA_UInt64 uInt64;
	UA_Float myFloat;
	UA_Double myDouble;
	UA_String string;
	UA_DateTime dateTime;
	UA_Guid guid;
	UA_ByteString byteString;
	UA_XmlElement xmlElement;
	UA_NodeId nodeId;
	UA_ExpandedNodeId expandedNodeId;
	UA_StatusCode statusCode;
	UA_DiagnosticInfo diagnosticInfo;
	UA_QualifiedName qualifiedName;
	UA_LocalizedText localizedText;
	UA_ExtensionObject extensionObject;
	UA_DataValue dataValue;
	UA_EnumeratedTestType enumeratedValue;
} UA_ScalarTestType;
UA_TYPE_PROTOTYPES(UA_ScalarTestType)
UA_TYPE_BINARY_ENCODING(UA_ScalarTestType)
UA_TYPE_XML_ENCODING(UA_ScalarTestType)

/** @brief A complex type containing all possible array types used for testing. */
typedef struct UA_ArrayTestType {
	UA_Int32 booleansSize;
	UA_Boolean* booleans;
	UA_Int32 sBytesSize;
	UA_SByte* sBytes;
	UA_Int32 int16sSize;
	UA_Int16* int16s;
	UA_Int32 uInt16sSize;
	UA_UInt16* uInt16s;
	UA_Int32 int32sSize;
	UA_Int32* int32s;
	UA_Int32 uInt32sSize;
	UA_UInt32* uInt32s;
	UA_Int32 int64sSize;
	UA_Int64* int64s;
	UA_Int32 uInt64sSize;
	UA_UInt64* uInt64s;
	UA_Int32 floatsSize;
	UA_Float* floats;
	UA_Int32 doublesSize;
	UA_Double* doubles;
	UA_Int32 stringsSize;
	UA_String* strings;
	UA_Int32 dateTimesSize;
	UA_DateTime* dateTimes;
	UA_Int32 guidsSize;
	UA_Guid* guids;
	UA_Int32 byteStringsSize;
	UA_ByteString* byteStrings;
	UA_Int32 xmlElementsSize;
	UA_XmlElement* xmlElements;
	UA_Int32 nodeIdsSize;
	UA_NodeId* nodeIds;
	UA_Int32 expandedNodeIdsSize;
	UA_ExpandedNodeId* expandedNodeIds;
	UA_Int32 statusCodesSize;
	UA_StatusCode* statusCodes;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
	UA_Int32 qualifiedNamesSize;
	UA_QualifiedName* qualifiedNames;
	UA_Int32 localizedTextsSize;
	UA_LocalizedText* localizedTexts;
	UA_Int32 extensionObjectsSize;
	UA_ExtensionObject* extensionObjects;
	UA_Int32 dataValuesSize;
	UA_DataValue* dataValues;
	UA_Int32 variantsSize;
	UA_Variant* variants;
	UA_Int32 enumeratedValuesSize;
	UA_EnumeratedTestType* enumeratedValues;
} UA_ArrayTestType;
UA_TYPE_PROTOTYPES(UA_ArrayTestType)
UA_TYPE_BINARY_ENCODING(UA_ArrayTestType)
UA_TYPE_XML_ENCODING(UA_ArrayTestType)

typedef struct UA_CompositeTestType {
	UA_ScalarTestType field1;
	UA_ArrayTestType field2;
} UA_CompositeTestType;
UA_TYPE_PROTOTYPES(UA_CompositeTestType)
UA_TYPE_BINARY_ENCODING(UA_CompositeTestType)
UA_TYPE_XML_ENCODING(UA_CompositeTestType)

typedef struct UA_TestStackRequest {
	UA_RequestHeader requestHeader;
	UA_UInt32 testId;
	UA_Int32 iteration;
	UA_Variant input;
} UA_TestStackRequest;
UA_TYPE_PROTOTYPES(UA_TestStackRequest)
UA_TYPE_BINARY_ENCODING(UA_TestStackRequest)
UA_TYPE_XML_ENCODING(UA_TestStackRequest)

typedef struct UA_TestStackResponse {
	UA_ResponseHeader responseHeader;
	UA_Variant output;
} UA_TestStackResponse;
UA_TYPE_PROTOTYPES(UA_TestStackResponse)
UA_TYPE_BINARY_ENCODING(UA_TestStackResponse)
UA_TYPE_XML_ENCODING(UA_TestStackResponse)

typedef struct UA_TestStackExRequest {
	UA_RequestHeader requestHeader;
	UA_UInt32 testId;
	UA_Int32 iteration;
	UA_CompositeTestType input;
} UA_TestStackExRequest;
UA_TYPE_PROTOTYPES(UA_TestStackExRequest)
UA_TYPE_BINARY_ENCODING(UA_TestStackExRequest)
UA_TYPE_XML_ENCODING(UA_TestStackExRequest)

typedef struct UA_TestStackExResponse {
	UA_ResponseHeader responseHeader;
	UA_CompositeTestType output;
} UA_TestStackExResponse;
UA_TYPE_PROTOTYPES(UA_TestStackExResponse)
UA_TYPE_BINARY_ENCODING(UA_TestStackExResponse)
UA_TYPE_XML_ENCODING(UA_TestStackExResponse)

typedef struct UA_BuildInfo {
	UA_String productUri;
	UA_String manufacturerName;
	UA_String productName;
	UA_String softwareVersion;
	UA_String buildNumber;
	UA_DateTime buildDate;
} UA_BuildInfo;
UA_TYPE_PROTOTYPES(UA_BuildInfo)
UA_TYPE_BINARY_ENCODING(UA_BuildInfo)
UA_TYPE_XML_ENCODING(UA_BuildInfo)

typedef UA_UInt32 UA_RedundancySupport;
enum UA_RedundancySupport_enum { 
	UA_REDUNDANCYSUPPORT_NONE = 0,
	UA_REDUNDANCYSUPPORT_COLD = 1,
	UA_REDUNDANCYSUPPORT_WARM = 2,
	UA_REDUNDANCYSUPPORT_HOT = 3,
	UA_REDUNDANCYSUPPORT_TRANSPARENT = 4,
	UA_REDUNDANCYSUPPORT_HOTANDMIRRORED = 5
};
UA_TYPE_PROTOTYPES (UA_RedundancySupport)
UA_TYPE_BINARY_ENCODING(UA_RedundancySupport)
UA_TYPE_XML_ENCODING(UA_RedundancySupport)

typedef UA_UInt32 UA_ServerState;
enum UA_ServerState_enum { 
	UA_SERVERSTATE_RUNNING = 0,
	UA_SERVERSTATE_FAILED = 1,
	UA_SERVERSTATE_NOCONFIGURATION = 2,
	UA_SERVERSTATE_SUSPENDED = 3,
	UA_SERVERSTATE_SHUTDOWN = 4,
	UA_SERVERSTATE_TEST = 5,
	UA_SERVERSTATE_COMMUNICATIONFAULT = 6,
	UA_SERVERSTATE_UNKNOWN = 7
};
UA_TYPE_PROTOTYPES (UA_ServerState)
UA_TYPE_BINARY_ENCODING(UA_ServerState)
UA_TYPE_XML_ENCODING(UA_ServerState)

typedef struct UA_RedundantServerDataType {
	UA_String serverId;
	UA_Byte serviceLevel;
	UA_ServerState serverState;
} UA_RedundantServerDataType;
UA_TYPE_PROTOTYPES(UA_RedundantServerDataType)
UA_TYPE_BINARY_ENCODING(UA_RedundantServerDataType)
UA_TYPE_XML_ENCODING(UA_RedundantServerDataType)

typedef struct UA_EndpointUrlListDataType {
	UA_Int32 endpointUrlListSize;
	UA_String* endpointUrlList;
} UA_EndpointUrlListDataType;
UA_TYPE_PROTOTYPES(UA_EndpointUrlListDataType)
UA_TYPE_BINARY_ENCODING(UA_EndpointUrlListDataType)
UA_TYPE_XML_ENCODING(UA_EndpointUrlListDataType)

typedef struct UA_NetworkGroupDataType {
	UA_String serverUri;
	UA_Int32 networkPathsSize;
	UA_EndpointUrlListDataType* networkPaths;
} UA_NetworkGroupDataType;
UA_TYPE_PROTOTYPES(UA_NetworkGroupDataType)
UA_TYPE_BINARY_ENCODING(UA_NetworkGroupDataType)
UA_TYPE_XML_ENCODING(UA_NetworkGroupDataType)

typedef struct UA_SamplingIntervalDiagnosticsDataType {
	UA_Double samplingInterval;
	UA_UInt32 monitoredItemCount;
	UA_UInt32 maxMonitoredItemCount;
	UA_UInt32 disabledMonitoredItemCount;
} UA_SamplingIntervalDiagnosticsDataType;
UA_TYPE_PROTOTYPES(UA_SamplingIntervalDiagnosticsDataType)
UA_TYPE_BINARY_ENCODING(UA_SamplingIntervalDiagnosticsDataType)
UA_TYPE_XML_ENCODING(UA_SamplingIntervalDiagnosticsDataType)

typedef struct UA_ServerDiagnosticsSummaryDataType {
	UA_UInt32 serverViewCount;
	UA_UInt32 currentSessionCount;
	UA_UInt32 cumulatedSessionCount;
	UA_UInt32 securityRejectedSessionCount;
	UA_UInt32 rejectedSessionCount;
	UA_UInt32 sessionTimeoutCount;
	UA_UInt32 sessionAbortCount;
	UA_UInt32 currentSubscriptionCount;
	UA_UInt32 cumulatedSubscriptionCount;
	UA_UInt32 publishingIntervalCount;
	UA_UInt32 securityRejectedRequestsCount;
	UA_UInt32 rejectedRequestsCount;
} UA_ServerDiagnosticsSummaryDataType;
UA_TYPE_PROTOTYPES(UA_ServerDiagnosticsSummaryDataType)
UA_TYPE_BINARY_ENCODING(UA_ServerDiagnosticsSummaryDataType)
UA_TYPE_XML_ENCODING(UA_ServerDiagnosticsSummaryDataType)

typedef struct UA_ServerStatusDataType {
	UA_DateTime startTime;
	UA_DateTime currentTime;
	UA_ServerState state;
	UA_BuildInfo buildInfo;
	UA_UInt32 secondsTillShutdown;
	UA_LocalizedText shutdownReason;
} UA_ServerStatusDataType;
UA_TYPE_PROTOTYPES(UA_ServerStatusDataType)
UA_TYPE_BINARY_ENCODING(UA_ServerStatusDataType)
UA_TYPE_XML_ENCODING(UA_ServerStatusDataType)

typedef struct UA_SessionSecurityDiagnosticsDataType {
	UA_NodeId sessionId;
	UA_String clientUserIdOfSession;
	UA_Int32 clientUserIdHistorySize;
	UA_String* clientUserIdHistory;
	UA_String authenticationMechanism;
	UA_String encoding;
	UA_String transportProtocol;
	UA_MessageSecurityMode securityMode;
	UA_String securityPolicyUri;
	UA_ByteString clientCertificate;
} UA_SessionSecurityDiagnosticsDataType;
UA_TYPE_PROTOTYPES(UA_SessionSecurityDiagnosticsDataType)
UA_TYPE_BINARY_ENCODING(UA_SessionSecurityDiagnosticsDataType)
UA_TYPE_XML_ENCODING(UA_SessionSecurityDiagnosticsDataType)

typedef struct UA_ServiceCounterDataType {
	UA_UInt32 totalCount;
	UA_UInt32 errorCount;
} UA_ServiceCounterDataType;
UA_TYPE_PROTOTYPES(UA_ServiceCounterDataType)
UA_TYPE_BINARY_ENCODING(UA_ServiceCounterDataType)
UA_TYPE_XML_ENCODING(UA_ServiceCounterDataType)

typedef struct UA_StatusResult {
	UA_StatusCode statusCode;
	UA_DiagnosticInfo diagnosticInfo;
} UA_StatusResult;
UA_TYPE_PROTOTYPES(UA_StatusResult)
UA_TYPE_BINARY_ENCODING(UA_StatusResult)
UA_TYPE_XML_ENCODING(UA_StatusResult)

typedef struct UA_SubscriptionDiagnosticsDataType {
	UA_NodeId sessionId;
	UA_UInt32 subscriptionId;
	UA_Byte priority;
	UA_Double publishingInterval;
	UA_UInt32 maxKeepAliveCount;
	UA_UInt32 maxLifetimeCount;
	UA_UInt32 maxNotificationsPerPublish;
	UA_Boolean publishingEnabled;
	UA_UInt32 modifyCount;
	UA_UInt32 enableCount;
	UA_UInt32 disableCount;
	UA_UInt32 republishRequestCount;
	UA_UInt32 republishMessageRequestCount;
	UA_UInt32 republishMessageCount;
	UA_UInt32 transferRequestCount;
	UA_UInt32 transferredToAltClientCount;
	UA_UInt32 transferredToSameClientCount;
	UA_UInt32 publishRequestCount;
	UA_UInt32 dataChangeNotificationsCount;
	UA_UInt32 eventNotificationsCount;
	UA_UInt32 notificationsCount;
	UA_UInt32 latePublishRequestCount;
	UA_UInt32 currentKeepAliveCount;
	UA_UInt32 currentLifetimeCount;
	UA_UInt32 unacknowledgedMessageCount;
	UA_UInt32 discardedMessageCount;
	UA_UInt32 monitoredItemCount;
	UA_UInt32 disabledMonitoredItemCount;
	UA_UInt32 monitoringQueueOverflowCount;
	UA_UInt32 nextSequenceNumber;
	UA_UInt32 eventQueueOverFlowCount;
} UA_SubscriptionDiagnosticsDataType;
UA_TYPE_PROTOTYPES(UA_SubscriptionDiagnosticsDataType)
UA_TYPE_BINARY_ENCODING(UA_SubscriptionDiagnosticsDataType)
UA_TYPE_XML_ENCODING(UA_SubscriptionDiagnosticsDataType)

typedef UA_UInt32 UA_ModelChangeStructureVerbMask;
enum UA_ModelChangeStructureVerbMask_enum { 
	UA_MODELCHANGESTRUCTUREVERBMASK_NODEADDED = 1,
	UA_MODELCHANGESTRUCTUREVERBMASK_NODEDELETED = 2,
	UA_MODELCHANGESTRUCTUREVERBMASK_REFERENCEADDED = 4,
	UA_MODELCHANGESTRUCTUREVERBMASK_REFERENCEDELETED = 8,
	UA_MODELCHANGESTRUCTUREVERBMASK_DATATYPECHANGED = 16
};
UA_TYPE_PROTOTYPES (UA_ModelChangeStructureVerbMask)
UA_TYPE_BINARY_ENCODING(UA_ModelChangeStructureVerbMask)
UA_TYPE_XML_ENCODING(UA_ModelChangeStructureVerbMask)

typedef struct UA_ModelChangeStructureDataType {
	UA_NodeId affected;
	UA_NodeId affectedType;
	UA_Byte verb;
} UA_ModelChangeStructureDataType;
UA_TYPE_PROTOTYPES(UA_ModelChangeStructureDataType)
UA_TYPE_BINARY_ENCODING(UA_ModelChangeStructureDataType)
UA_TYPE_XML_ENCODING(UA_ModelChangeStructureDataType)

typedef struct UA_SemanticChangeStructureDataType {
	UA_NodeId affected;
	UA_NodeId affectedType;
} UA_SemanticChangeStructureDataType;
UA_TYPE_PROTOTYPES(UA_SemanticChangeStructureDataType)
UA_TYPE_BINARY_ENCODING(UA_SemanticChangeStructureDataType)
UA_TYPE_XML_ENCODING(UA_SemanticChangeStructureDataType)

typedef struct UA_Range {
	UA_Double low;
	UA_Double high;
} UA_Range;
UA_TYPE_PROTOTYPES(UA_Range)
UA_TYPE_BINARY_ENCODING(UA_Range)
UA_TYPE_XML_ENCODING(UA_Range)

typedef struct UA_EUInformation {
	UA_String namespaceUri;
	UA_Int32 unitId;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
} UA_EUInformation;
UA_TYPE_PROTOTYPES(UA_EUInformation)
UA_TYPE_BINARY_ENCODING(UA_EUInformation)
UA_TYPE_XML_ENCODING(UA_EUInformation)

typedef UA_UInt32 UA_AxisScaleEnumeration;
enum UA_AxisScaleEnumeration_enum { 
	UA_AXISSCALEENUMERATION_LINEAR = 0,
	UA_AXISSCALEENUMERATION_LOG = 1,
	UA_AXISSCALEENUMERATION_LN = 2
};
UA_TYPE_PROTOTYPES (UA_AxisScaleEnumeration)
UA_TYPE_BINARY_ENCODING(UA_AxisScaleEnumeration)
UA_TYPE_XML_ENCODING(UA_AxisScaleEnumeration)

typedef struct UA_ComplexNumberType {
	UA_Float real;
	UA_Float imaginary;
} UA_ComplexNumberType;
UA_TYPE_PROTOTYPES(UA_ComplexNumberType)
UA_TYPE_BINARY_ENCODING(UA_ComplexNumberType)
UA_TYPE_XML_ENCODING(UA_ComplexNumberType)

typedef struct UA_DoubleComplexNumberType {
	UA_Double real;
	UA_Double imaginary;
} UA_DoubleComplexNumberType;
UA_TYPE_PROTOTYPES(UA_DoubleComplexNumberType)
UA_TYPE_BINARY_ENCODING(UA_DoubleComplexNumberType)
UA_TYPE_XML_ENCODING(UA_DoubleComplexNumberType)

typedef struct UA_AxisInformation {
	UA_EUInformation engineeringUnits;
	UA_Range eURange;
	UA_LocalizedText title;
	UA_AxisScaleEnumeration axisScaleType;
	UA_Int32 axisStepsSize;
	UA_Double* axisSteps;
} UA_AxisInformation;
UA_TYPE_PROTOTYPES(UA_AxisInformation)
UA_TYPE_BINARY_ENCODING(UA_AxisInformation)
UA_TYPE_XML_ENCODING(UA_AxisInformation)

typedef struct UA_XVType {
	UA_Double x;
	UA_Float value;
} UA_XVType;
UA_TYPE_PROTOTYPES(UA_XVType)
UA_TYPE_BINARY_ENCODING(UA_XVType)
UA_TYPE_XML_ENCODING(UA_XVType)

typedef struct UA_ProgramDiagnosticDataType {
	UA_NodeId createSessionId;
	UA_String createClientName;
	UA_DateTime invocationCreationTime;
	UA_DateTime lastTransitionTime;
	UA_String lastMethodCall;
	UA_NodeId lastMethodSessionId;
	UA_Int32 lastMethodInputArgumentsSize;
	UA_Argument* lastMethodInputArguments;
	UA_Int32 lastMethodOutputArgumentsSize;
	UA_Argument* lastMethodOutputArguments;
	UA_DateTime lastMethodCallTime;
	UA_StatusResult lastMethodReturnStatus;
} UA_ProgramDiagnosticDataType;
UA_TYPE_PROTOTYPES(UA_ProgramDiagnosticDataType)
UA_TYPE_BINARY_ENCODING(UA_ProgramDiagnosticDataType)
UA_TYPE_XML_ENCODING(UA_ProgramDiagnosticDataType)

typedef struct UA_Annotation {
	UA_String message;
	UA_String userName;
	UA_DateTime annotationTime;
} UA_Annotation;
UA_TYPE_PROTOTYPES(UA_Annotation)
UA_TYPE_BINARY_ENCODING(UA_Annotation)
UA_TYPE_XML_ENCODING(UA_Annotation)

typedef UA_UInt32 UA_ExceptionDeviationFormat;
enum UA_ExceptionDeviationFormat_enum { 
	UA_EXCEPTIONDEVIATIONFORMAT_ABSOLUTEVALUE = 0,
	UA_EXCEPTIONDEVIATIONFORMAT_PERCENTOFRANGE = 1,
	UA_EXCEPTIONDEVIATIONFORMAT_PERCENTOFVALUE = 2,
	UA_EXCEPTIONDEVIATIONFORMAT_PERCENTOFEURANGE = 3,
	UA_EXCEPTIONDEVIATIONFORMAT_UNKNOWN = 4
};
UA_TYPE_PROTOTYPES (UA_ExceptionDeviationFormat)
UA_TYPE_BINARY_ENCODING(UA_ExceptionDeviationFormat)
UA_TYPE_XML_ENCODING(UA_ExceptionDeviationFormat)

/** @brief Specifies the attributes which belong to all nodes. */
typedef struct UA_Node {
	UA_NodeId nodeId;
	UA_NodeClass nodeClass;
	UA_QualifiedName browseName;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Int32 referencesSize;
	UA_ReferenceNode* references;
} UA_Node;
UA_TYPE_PROTOTYPES(UA_Node)
UA_TYPE_BINARY_ENCODING(UA_Node)
UA_TYPE_XML_ENCODING(UA_Node)

typedef struct UA_InstanceNode {
	UA_NodeId nodeId;
	UA_NodeClass nodeClass;
	UA_QualifiedName browseName;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Int32 referencesSize;
	UA_ReferenceNode* references;
} UA_InstanceNode;
UA_TYPE_PROTOTYPES(UA_InstanceNode)
UA_TYPE_BINARY_ENCODING(UA_InstanceNode)
UA_TYPE_XML_ENCODING(UA_InstanceNode)

typedef struct UA_TypeNode {
	UA_NodeId nodeId;
	UA_NodeClass nodeClass;
	UA_QualifiedName browseName;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Int32 referencesSize;
	UA_ReferenceNode* references;
} UA_TypeNode;
UA_TYPE_PROTOTYPES(UA_TypeNode)
UA_TYPE_BINARY_ENCODING(UA_TypeNode)
UA_TYPE_XML_ENCODING(UA_TypeNode)

/** @brief Specifies the attributes which belong to object nodes. */
typedef struct UA_ObjectNode {
	UA_NodeId nodeId;
	UA_NodeClass nodeClass;
	UA_QualifiedName browseName;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Int32 referencesSize;
	UA_ReferenceNode* references;
	UA_Byte eventNotifier;
} UA_ObjectNode;
UA_TYPE_PROTOTYPES(UA_ObjectNode)
UA_TYPE_BINARY_ENCODING(UA_ObjectNode)
UA_TYPE_XML_ENCODING(UA_ObjectNode)

/** @brief Specifies the attributes which belong to object type nodes. */
typedef struct UA_ObjectTypeNode {
	UA_NodeId nodeId;
	UA_NodeClass nodeClass;
	UA_QualifiedName browseName;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Int32 referencesSize;
	UA_ReferenceNode* references;
	UA_Boolean isAbstract;
} UA_ObjectTypeNode;
UA_TYPE_PROTOTYPES(UA_ObjectTypeNode)
UA_TYPE_BINARY_ENCODING(UA_ObjectTypeNode)
UA_TYPE_XML_ENCODING(UA_ObjectTypeNode)

/** @brief Specifies the attributes which belong to variable nodes. */
typedef struct UA_VariableNode {
	UA_NodeId nodeId;
	UA_NodeClass nodeClass;
	UA_QualifiedName browseName;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Int32 referencesSize;
	UA_ReferenceNode* references;
	UA_Variant value;
	UA_NodeId dataType;
	UA_Int32 valueRank;
	UA_Int32 arrayDimensionsSize;
	UA_UInt32* arrayDimensions;
	UA_Byte accessLevel;
	UA_Byte userAccessLevel;
	UA_Double minimumSamplingInterval;
	UA_Boolean historizing;
} UA_VariableNode;
UA_TYPE_PROTOTYPES(UA_VariableNode)
UA_TYPE_BINARY_ENCODING(UA_VariableNode)
UA_TYPE_XML_ENCODING(UA_VariableNode)

/** @brief Specifies the attributes which belong to variable type nodes. */
typedef struct UA_VariableTypeNode {
	UA_NodeId nodeId;
	UA_NodeClass nodeClass;
	UA_QualifiedName browseName;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Int32 referencesSize;
	UA_ReferenceNode* references;
	UA_Variant value;
	UA_NodeId dataType;
	UA_Int32 valueRank;
	UA_Int32 arrayDimensionsSize;
	UA_UInt32* arrayDimensions;
	UA_Boolean isAbstract;
} UA_VariableTypeNode;
UA_TYPE_PROTOTYPES(UA_VariableTypeNode)
UA_TYPE_BINARY_ENCODING(UA_VariableTypeNode)
UA_TYPE_XML_ENCODING(UA_VariableTypeNode)

/** @brief Specifies the attributes which belong to reference type nodes. */
typedef struct UA_ReferenceTypeNode {
	UA_NodeId nodeId;
	UA_NodeClass nodeClass;
	UA_QualifiedName browseName;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Int32 referencesSize;
	UA_ReferenceNode* references;
	UA_Boolean isAbstract;
	UA_Boolean symmetric;
	UA_LocalizedText inverseName;
} UA_ReferenceTypeNode;
UA_TYPE_PROTOTYPES(UA_ReferenceTypeNode)
UA_TYPE_BINARY_ENCODING(UA_ReferenceTypeNode)
UA_TYPE_XML_ENCODING(UA_ReferenceTypeNode)

/** @brief Specifies the attributes which belong to method nodes. */
typedef struct UA_MethodNode {
	UA_NodeId nodeId;
	UA_NodeClass nodeClass;
	UA_QualifiedName browseName;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Int32 referencesSize;
	UA_ReferenceNode* references;
	UA_Boolean executable;
	UA_Boolean userExecutable;
} UA_MethodNode;
UA_TYPE_PROTOTYPES(UA_MethodNode)
UA_TYPE_BINARY_ENCODING(UA_MethodNode)
UA_TYPE_XML_ENCODING(UA_MethodNode)

typedef struct UA_ViewNode {
	UA_NodeId nodeId;
	UA_NodeClass nodeClass;
	UA_QualifiedName browseName;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Int32 referencesSize;
	UA_ReferenceNode* references;
	UA_Boolean containsNoLoops;
	UA_Byte eventNotifier;
} UA_ViewNode;
UA_TYPE_PROTOTYPES(UA_ViewNode)
UA_TYPE_BINARY_ENCODING(UA_ViewNode)
UA_TYPE_XML_ENCODING(UA_ViewNode)

typedef struct UA_DataTypeNode {
	UA_NodeId nodeId;
	UA_NodeClass nodeClass;
	UA_QualifiedName browseName;
	UA_LocalizedText displayName;
	UA_LocalizedText description;
	UA_UInt32 writeMask;
	UA_UInt32 userWriteMask;
	UA_Int32 referencesSize;
	UA_ReferenceNode* references;
	UA_Boolean isAbstract;
} UA_DataTypeNode;
UA_TYPE_PROTOTYPES(UA_DataTypeNode)
UA_TYPE_BINARY_ENCODING(UA_DataTypeNode)
UA_TYPE_XML_ENCODING(UA_DataTypeNode)

typedef struct UA_ReadEventDetails {
	UA_UInt32 numValuesPerNode;
	UA_DateTime startTime;
	UA_DateTime endTime;
	UA_EventFilter filter;
} UA_ReadEventDetails;
UA_TYPE_PROTOTYPES(UA_ReadEventDetails)
UA_TYPE_BINARY_ENCODING(UA_ReadEventDetails)
UA_TYPE_XML_ENCODING(UA_ReadEventDetails)

typedef struct UA_ReadProcessedDetails {
	UA_DateTime startTime;
	UA_DateTime endTime;
	UA_Double processingInterval;
	UA_Int32 aggregateTypeSize;
	UA_NodeId* aggregateType;
	UA_AggregateConfiguration aggregateConfiguration;
} UA_ReadProcessedDetails;
UA_TYPE_PROTOTYPES(UA_ReadProcessedDetails)
UA_TYPE_BINARY_ENCODING(UA_ReadProcessedDetails)
UA_TYPE_XML_ENCODING(UA_ReadProcessedDetails)

typedef struct UA_ModificationInfo {
	UA_DateTime modificationTime;
	UA_HistoryUpdateType updateType;
	UA_String userName;
} UA_ModificationInfo;
UA_TYPE_PROTOTYPES(UA_ModificationInfo)
UA_TYPE_BINARY_ENCODING(UA_ModificationInfo)
UA_TYPE_XML_ENCODING(UA_ModificationInfo)

typedef struct UA_HistoryModifiedData {
	UA_Int32 dataValuesSize;
	UA_DataValue* dataValues;
	UA_Int32 modificationInfosSize;
	UA_ModificationInfo* modificationInfos;
} UA_HistoryModifiedData;
UA_TYPE_PROTOTYPES(UA_HistoryModifiedData)
UA_TYPE_BINARY_ENCODING(UA_HistoryModifiedData)
UA_TYPE_XML_ENCODING(UA_HistoryModifiedData)

typedef struct UA_HistoryEvent {
	UA_Int32 eventsSize;
	UA_HistoryEventFieldList* events;
} UA_HistoryEvent;
UA_TYPE_PROTOTYPES(UA_HistoryEvent)
UA_TYPE_BINARY_ENCODING(UA_HistoryEvent)
UA_TYPE_XML_ENCODING(UA_HistoryEvent)

typedef struct UA_UpdateEventDetails {
	UA_NodeId nodeId;
	UA_PerformUpdateType performInsertReplace;
	UA_EventFilter filter;
	UA_Int32 eventDataSize;
	UA_HistoryEventFieldList* eventData;
} UA_UpdateEventDetails;
UA_TYPE_PROTOTYPES(UA_UpdateEventDetails)
UA_TYPE_BINARY_ENCODING(UA_UpdateEventDetails)
UA_TYPE_XML_ENCODING(UA_UpdateEventDetails)

typedef struct UA_HistoryUpdateEventResult {
	UA_StatusCode statusCode;
	UA_EventFilterResult eventFilterResult;
} UA_HistoryUpdateEventResult;
UA_TYPE_PROTOTYPES(UA_HistoryUpdateEventResult)
UA_TYPE_BINARY_ENCODING(UA_HistoryUpdateEventResult)
UA_TYPE_XML_ENCODING(UA_HistoryUpdateEventResult)

typedef struct UA_DataChangeNotification {
	UA_Int32 monitoredItemsSize;
	UA_MonitoredItemNotification* monitoredItems;
	UA_Int32 diagnosticInfosSize;
	UA_DiagnosticInfo* diagnosticInfos;
} UA_DataChangeNotification;
UA_TYPE_PROTOTYPES(UA_DataChangeNotification)
UA_TYPE_BINARY_ENCODING(UA_DataChangeNotification)
UA_TYPE_XML_ENCODING(UA_DataChangeNotification)

typedef struct UA_EventNotificationList {
	UA_Int32 eventsSize;
	UA_EventFieldList* events;
} UA_EventNotificationList;
UA_TYPE_PROTOTYPES(UA_EventNotificationList)
UA_TYPE_BINARY_ENCODING(UA_EventNotificationList)
UA_TYPE_XML_ENCODING(UA_EventNotificationList)

typedef struct UA_SessionDiagnosticsDataType {
	UA_NodeId sessionId;
	UA_String sessionName;
	UA_ApplicationDescription clientDescription;
	UA_String serverUri;
	UA_String endpointUrl;
	UA_Int32 localeIdsSize;
	UA_String* localeIds;
	UA_Double actualSessionTimeout;
	UA_UInt32 maxResponseMessageSize;
	UA_DateTime clientConnectionTime;
	UA_DateTime clientLastContactTime;
	UA_UInt32 currentSubscriptionsCount;
	UA_UInt32 currentMonitoredItemsCount;
	UA_UInt32 currentPublishRequestsInQueue;
	UA_ServiceCounterDataType totalRequestCount;
	UA_UInt32 unauthorizedRequestCount;
	UA_ServiceCounterDataType readCount;
	UA_ServiceCounterDataType historyReadCount;
	UA_ServiceCounterDataType writeCount;
	UA_ServiceCounterDataType historyUpdateCount;
	UA_ServiceCounterDataType callCount;
	UA_ServiceCounterDataType createMonitoredItemsCount;
	UA_ServiceCounterDataType modifyMonitoredItemsCount;
	UA_ServiceCounterDataType setMonitoringModeCount;
	UA_ServiceCounterDataType setTriggeringCount;
	UA_ServiceCounterDataType deleteMonitoredItemsCount;
	UA_ServiceCounterDataType createSubscriptionCount;
	UA_ServiceCounterDataType modifySubscriptionCount;
	UA_ServiceCounterDataType setPublishingModeCount;
	UA_ServiceCounterDataType publishCount;
	UA_ServiceCounterDataType republishCount;
	UA_ServiceCounterDataType transferSubscriptionsCount;
	UA_ServiceCounterDataType deleteSubscriptionsCount;
	UA_ServiceCounterDataType addNodesCount;
	UA_ServiceCounterDataType addReferencesCount;
	UA_ServiceCounterDataType deleteNodesCount;
	UA_ServiceCounterDataType deleteReferencesCount;
	UA_ServiceCounterDataType browseCount;
	UA_ServiceCounterDataType browseNextCount;
	UA_ServiceCounterDataType translateBrowsePathsToNodeIdsCount;
	UA_ServiceCounterDataType queryFirstCount;
	UA_ServiceCounterDataType queryNextCount;
	UA_ServiceCounterDataType registerNodesCount;
	UA_ServiceCounterDataType unregisterNodesCount;
} UA_SessionDiagnosticsDataType;
UA_TYPE_PROTOTYPES(UA_SessionDiagnosticsDataType)
UA_TYPE_BINARY_ENCODING(UA_SessionDiagnosticsDataType)
UA_TYPE_XML_ENCODING(UA_SessionDiagnosticsDataType)

#endif
